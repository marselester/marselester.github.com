<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>marselester's blog</title><link href="http://marselester.com/" rel="alternate"></link><link href="http://marselester.com/feeds/all.atom.xml" rel="self"></link><id>http://marselester.com/</id><updated>2018-09-28T00:00:00+07:00</updated><entry><title>How to Structure Go Projects</title><link href="http://marselester.com/how-to-structure-go-projects.html" rel="alternate"></link><published>2018-09-28T00:00:00+07:00</published><updated>2018-09-28T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2018-09-28:/how-to-structure-go-projects.html</id><summary type="html">&lt;p&gt;I came to Go from Django where the framework defines project layout, thus I wanted to know
how to structure my Go applications. After reading documentation and building a few Django projects,
you get a clear mental picture, as most of the questions are already answered.
That helps to keep …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came to Go from Django where the framework defines project layout, thus I wanted to know
how to structure my Go applications. After reading documentation and building a few Django projects,
you get a clear mental picture, as most of the questions are already answered.
That helps to keep the projects within a company consistent, so developers don't have to struggle
when they land on a new codebase. I was looking for a similar framework approach in Go,
but none of them felt right to me. For some reason the same concepts do not resonate with Go.
I didn't have better ideas, so I watched a few videos from conferences.
Here are the talks I found most helpful and I use them as guidelines:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ben Johnson's &lt;a class="reference external" href="https://www.youtube.com/watch?v=LMSbsW1Xpwg"&gt;Structuring Applications for Growth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kat Zien's &lt;a class="reference external" href="https://www.youtube.com/watch?v=oL6JBUk6tj0"&gt;How Do You Structure Your Go Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peter Bourgon's &lt;a class="reference external" href="https://www.youtube.com/watch?v=LHe1Cb_Ud_M"&gt;Ways To Do Things&lt;/a&gt;.
I tried his ideas in &lt;a class="reference external" href="https://github.com/marselester/rascaldb/blob/master/rascaldb.go"&gt;RascalDB 😜&lt;/a&gt;
to serialize concurrent DB actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I encourage you to watch those talks and go over code examples they provided.&lt;/p&gt;
&lt;p&gt;The following is my takeaway which could be completely misleading and far from the original ideas
(just in case, you don't have to apply all of them together).
If you feel something doesn't bring enough value in your case, just skip it, trust your intuition.
Development requires many iterations to bounce ideas until the result becomes good enough.&lt;/p&gt;
&lt;div class="section" id="know-your-domain"&gt;
&lt;h2&gt;Know Your Domain&lt;/h2&gt;
&lt;p&gt;I like to start a new project on A4 paper and dump everything I know in free form
(what the problem are you facing, can you solve it without writing code,
what are possible solutions (pros/cons), terminology, system requirements, API endpoints, sketches,
doodles, whatever gets your train of thoughts moving). Paper helps to get away from constraints of computer,
I can write and draw without any programs which would otherwise have taken time and stolen my brain cycles.
Paper helps me to stay focused — nothing blinks, pops up or rings, there is no urge to multitask
(check email/Slack, switch between editor and console as if there is something new).&lt;/p&gt;
&lt;p&gt;Once you wrote everything down, you might realize there is not enough information to make progress.
So you can reach out to stake holders and get more insights using your notes.
Don't forget to write new info as well. It might take a few iterations when you finally establish
common terminology, refine the actual project's goal, and cut unnecessary features/requirements.&lt;/p&gt;
&lt;p&gt;Now you have a mental picture of the project with clear deliverables.
Based on that I like to spend time to come up with a concise project/repository name which
summarizes nicely the project's goal and spirit (thesaurus comes to the rescue).
As a next step I usually create README file where insights from the paper are documented.
This time you want everyone in the world to understand what you learned about the project.
This helps you to iterate once more as you're documenting in README, and the end result
can be shared with coworkers (they might not understand your handwriting and doodles).
If they have questions, that means you have a room for improvement, since other people
don't have a context you obtained. Take your time and write it down, this will ensure that
you will be able to get help with the project much easier (when you're on vacation or
have to hand over the code). With some practice you'll anticipate questions and
provide answers in README, so it won't take as much time from your coworkers next time.
Keeping in mind that you are ultimately solving problems for your customers and
designing the system and writing code for your coworkers (not just for yourself)
helps to rigorously document as you go. Or else prepare to answer the same questions
over and over again.&lt;/p&gt;
&lt;p&gt;Let's say you're building an API client, then it makes sense to start from
a usage example in the README, since most of the documentation work is done by API provider.
How will people download your library? How will they import it, does the path look concise and clear?
How will your end user configure a client? What use cases your users might have (custom API domain,
timeouts, logging, instrumentation)? Think of a few workflows and see how would you handle errors.
Best case scenario is using your own library to reveal pain points.
Check out &lt;a class="reference external" href="https://github.com/marselester/bitgo-v2"&gt;one of my attempts&lt;/a&gt; to find a decent layout of
an API library. The library has a configurable client (you can instantiate many of them, e.g., one per coin)
which allows to use a custom logger, http.Client, etc. It also has embedded services — things that know
how to speak with particular API endpoints to operate API resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-to-the-point"&gt;
&lt;h2&gt;Getting to the Point&lt;/h2&gt;
&lt;p&gt;As you can see from the talks the main theme in Go application structure is heavily
influenced by Domain-Driven Design (DDD). Using the research done on your project,
you shall write down entities (as Go structs) of the domain model and services (as Go interfaces)
which perform operations over those entities.&lt;/p&gt;
&lt;p&gt;I should mention that for simplicity's sake in my projects I decided to combine DDD &amp;quot;service&amp;quot; and
&amp;quot;repository&amp;quot; concepts under &amp;quot;service&amp;quot; term.&lt;/p&gt;
&lt;p&gt;Let's proceed with listing minimal set of operations over the key entities to keep the scope small.
It helps to imagine that there are different service implementations,
an entity can be stored anywhere, for example, in Postgres, Kafka, memory, Redis,
JSON file, remote API. But keep in mind semantics that storage of choice provides:
getting a list of entities from Kafka and Postgres are hard to abstract (streaming vs quering).
Moreover, if you do so, you might create unnecessary constraints for yourself.
In reality, it is very unlikely that a project will change storages often,
since you've chosen them for a reason (the choice of the storage is influenced
by a problem you're solving, its constraints and guarantees you need).
Most likely you've already chosen the storages in advance, so make sure you
don't fight with interfaces you defined in your domain model. If you know your services
need to share the same SQL transaction, embrace it in interfaces, for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PaymentService&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;CreatePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Payment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do you put all operations (add/list) into one service interface? I don't know.
You have to decide. If you add an entity to Postgres, you expect to list them
from Postgres as well. From this perspective &amp;quot;add&amp;quot; and &amp;quot;list&amp;quot; operations should be
under the same interface. If in-memory storage can't implement the service interface,
perhaps you don't have to enforce operation under the same interface,
then probably it's ok to split it.&lt;/p&gt;
&lt;p&gt;Ben Johnson defines entities in a single package where domain model is described — the package
shouldn’t have third party dependencies. Whereas Kat Zien in her demo created a package per service:
&amp;quot;adder&amp;quot; package that adds beers and reviews, &amp;quot;lister&amp;quot; service lists beers and reviews.
Each package defines its own beer and review structs.&lt;/p&gt;
&lt;p&gt;In my projects I isolate services implementation in a single package.
For example, if I stored beer reviews in Kafka, I would have a kafka package which exposes
a client and beer/review services embedded in it. The same applies to postgres package — two services use
the same db connection pool and beer/review entities might appear in the same db transaction.&lt;/p&gt;
&lt;p&gt;During coding I combine the service implementations into a program (some server or
a ctl tool) kept in cmd directory. That helps me to validate design ideas and notice any awkward
component integrations. Similar to service implementations, try to think where the input and
output could be coming from/to: standard input/output, http, rpc, db.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example"&gt;
&lt;h2&gt;An Example&lt;/h2&gt;
&lt;p&gt;Now let's have a look at &lt;a class="reference external" href="https://github.com/marselester/distributed-payment"&gt;distributed payment&lt;/a&gt;
demo project where I explored an idea of payment transaction
without atomic commit across 3 Kafka partitions.&lt;/p&gt;
&lt;p&gt;The domain model is defined in the repository root (note, you can place your packages
in &amp;quot;internal&amp;quot; directory, so you don't mix them up with unrelated files):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;wallet.go&lt;/cite&gt; has &lt;cite&gt;Transfer&lt;/cite&gt;, &lt;cite&gt;Payment&lt;/cite&gt; entities, and services &lt;cite&gt;TransferService&lt;/cite&gt;, &lt;cite&gt;PaymentService&lt;/cite&gt;
which can create and list the entities. Since the project is based on Kafka,
the interfaces reflect that (&lt;cite&gt;partition&lt;/cite&gt;, &lt;cite&gt;offset&lt;/cite&gt; params). The services accept &lt;cite&gt;context.Context&lt;/cite&gt;
as a first argument, because we should be able to tell implementations to cancel operation.
&lt;a class="reference external" href="https://github.com/opentracing/opentracing-go"&gt;OpenTracing&lt;/a&gt; can leverage context as well.
Pay attention to a pointer/value semantics (share or not) in the service interfaces.
Since an entity in DDD terms has a unique identity, a pointer semantics was used,
hence &lt;cite&gt;*Transfer&lt;/cite&gt; is passed to &lt;cite&gt;CreateTransfer()&lt;/cite&gt; and returned from &lt;cite&gt;FromOffset()&lt;/cite&gt;. Have a look at
&lt;a class="reference external" href="https://www.ardanlabs.com/blog/2017/06/design-philosophy-on-data-and-semantics.html"&gt;Design Philosophy On Data And Semantics&lt;/a&gt;
for more insights.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;error.go&lt;/cite&gt; contains errors which are relevant to the whole domain model,
&lt;a class="reference external" href="https://middlemost.com/failure-is-your-domain/"&gt;Failure is your Domain&lt;/a&gt;.
On implementation level there could be their own specific errors, for example, HTTP API errors in
&lt;cite&gt;rest/error.go&lt;/cite&gt; define JSON and validation errors.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;log.go&lt;/cite&gt; borrows &lt;cite&gt;Logger&lt;/cite&gt; interface from Go kit. Since logging is an integral part of the system,
placing it nearby the domain model seems justified. There is
&lt;a class="reference external" href="https://github.com/go-commons/commons/issues/1"&gt;Standard logger interface&lt;/a&gt; discussion
where the consensus is to emit events instead of logging in the library.
Best practices and examples of how to emit events is still an
&lt;a class="reference external" href="https://github.com/go-commons/event/issues/1"&gt;open topic&lt;/a&gt; at the time of writing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementations of the services defined in &lt;cite&gt;wallet.go&lt;/cite&gt; are isolated in packages
by their dependency name, for example, kafka, rest, mock, rocksdb.&lt;/p&gt;
&lt;p&gt;Package kafka implements wallet services and provides the Client access to them.
There were two design options: embed the services to the Client struct or
inject a service into each other. The example below would allow to have
a swappable &lt;cite&gt;PaymentService&lt;/cite&gt; (&amp;quot;pg&amp;quot; refers to a Postgres implementation):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;kafka&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TransferService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PaymentService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewPaymentService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the other hand, grouping services in the Client would let services maintain DB transactions
by sharing the same &lt;cite&gt;*sql.DB&lt;/cite&gt;. Here is &lt;cite&gt;pg.Client&lt;/cite&gt; example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Client represents a client to the underlying PostgreSQL data store.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Transfer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;TransferService&lt;/span&gt;
  &lt;span class="nx"&gt;Payment&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;PaymentService&lt;/span&gt;

  &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;

  &lt;span class="nx"&gt;db&lt;/span&gt;        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;
  &lt;span class="nx"&gt;transferQ&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;paymentQ&lt;/span&gt;  &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://github.com/marselester/distributed-signup/blob/master/pg/user_service.go"&gt;distributed-signup&lt;/a&gt;
project a Client concept is baked into &lt;cite&gt;UserService&lt;/cite&gt;, because it was the only service that
needed access to Postgres.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// UserService reprensets a service to store signed up users.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="nx"&gt;Config&lt;/span&gt;

  &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pgx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ConnPool&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Package rest is responsible for translating incoming HTTP requests to wallet domain and
then translating results from wallet model back to HTTP responses.
The package doesn't implement &lt;cite&gt;TransferService&lt;/cite&gt; per se, it uses one in its Server.
The REST-style API server itself is put together in
&lt;a class="reference external" href="https://github.com/marselester/distributed-payment/blob/master/cmd/transfer-server/main.go"&gt;cmd/transfer-server&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Server represents an HTTP API handler for wallet services.&lt;/span&gt;
&lt;span class="c1"&gt;// It wraps a TransferService so we can provide different&lt;/span&gt;
&lt;span class="c1"&gt;// implementations, e.g., Kafka or a mock.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;chi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mux&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;          &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Logger&lt;/span&gt;
  &lt;span class="nx"&gt;transferService&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TransferService&lt;/span&gt;
  &lt;span class="nx"&gt;wopts&lt;/span&gt;           &lt;span class="nx"&gt;walletOption&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Originally in &lt;a class="reference external" href="https://medium.com/wtf-dial/wtf-dial-http-api-d8800ccd605f"&gt;WTF Dial: HTTP API&lt;/a&gt;
Ben Johnson explained how to implement API properly and isolate http dependencies in wtf/http package.&lt;/p&gt;
&lt;p&gt;Package mock provides mock services to facilitate testing. For example, for most cases
we do not need Kafka implementation of a transfer service to be used in HTTP API testing.&lt;/p&gt;
&lt;p&gt;Package rocksdb implements user requests deduplication using RocksDB to
memorise already processed request IDs. Requests deduplication is an integral part of
a distributed system, hence the domain model must embrace it.&lt;/p&gt;
&lt;p&gt;Everything is connected in cmd directory. Note, that the domain package is used everywhere.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;cmd/transfer-server&lt;/cite&gt; is HTTP API server to create money transfers which are stored in Kafka.
It delegates the actual hard work to kafka and rest packages.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;cmd/paymentd&lt;/cite&gt; program is responsible for creating incoming &amp;amp; outgoing payment pairs based on
money transfer requests stored in Kafka.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;cmd/accountantd&lt;/cite&gt; is the last program in the pipeline. It sequentially reads Kafka messages
from &lt;cite&gt;wallet.payment&lt;/cite&gt; topic, deduplicates messages by request ID, and applies the changes to
the account balances. Deduplication is provided by rocksdb package mentioned above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To wrap up, that's all I managed to recall :) I look forward for more talks on structuring Go applications.&lt;/p&gt;
&lt;/div&gt;
</content><category term="golang"></category><category term="project structure"></category><category term="Domain-Driven Design"></category></entry><entry><title>Forward DogStatsD Metrics to Prometheus</title><link href="http://marselester.com/prometheus-via-dogstatsd.html" rel="alternate"></link><published>2017-06-17T00:00:00+07:00</published><updated>2017-06-17T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2017-06-17:/prometheus-via-dogstatsd.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; StatsD doesn't have metric labels, DogStatsD does.&lt;/p&gt;
&lt;p&gt;This is a follow up post after
&lt;a class="reference external" href="http://marselester.com/django-prometheus-via-statsd.html"&gt;Instrumenting Django with Prometheus and StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;You got Prometheus up and running and eager to start instrumenting your Django application.
Don't be hasty and read &lt;a class="reference external" href="https://prometheus.io/docs/practices/instrumentation/"&gt;Prometheus Best Practices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's say our application has to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; StatsD doesn't have metric labels, DogStatsD does.&lt;/p&gt;
&lt;p&gt;This is a follow up post after
&lt;a class="reference external" href="http://marselester.com/django-prometheus-via-statsd.html"&gt;Instrumenting Django with Prometheus and StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;You got Prometheus up and running and eager to start instrumenting your Django application.
Don't be hasty and read &lt;a class="reference external" href="https://prometheus.io/docs/practices/instrumentation/"&gt;Prometheus Best Practices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's say our application has to use a Python library to request weather forecast.
Sometimes Weather API server doesn't work as expected and we find HTTP 500 status codes in our application logs.
Out of curiosity we want to know how often that happens.
What if we already have to look for another forecast provider?&lt;/p&gt;
&lt;p&gt;First idea could be using a counter &amp;quot;weatherapi_responses_500_total&amp;quot;.
From the Prometheus docs:&lt;/p&gt;
&lt;blockquote&gt;
When reporting failures, you should generally have some other metric
representing the total number of attempts.
This makes the failure ratio easy to calculate.&lt;/blockquote&gt;
&lt;p&gt;Alright, then we need to count &amp;quot;HTTP 200 OK&amp;quot; API responses as well &amp;quot;weatherapi_responses_200_total&amp;quot;.
But what about other HTTP status codes? Shall we create metrics for each of them?&lt;/p&gt;
&lt;blockquote&gt;
When you have multiple metrics that you want to add/average/sum,
they should usually be one metric with labels rather than multiple metrics.&lt;/blockquote&gt;
&lt;p&gt;As this is exactly our case, we should use Prometheus labels. Therefore our
metric name should be &amp;quot;weatherapi_responses_total&amp;quot; with a &amp;quot;code&amp;quot; label for the HTTP response code.&lt;/p&gt;
&lt;p&gt;Depending on a scenario, we might have multiple API clients in our application.
For example, we may generalize metric to &amp;quot;api_responses_total&amp;quot; with
the following labels &amp;quot;code=200&amp;quot;, &amp;quot;service=weather&amp;quot;.&lt;/p&gt;
&lt;p&gt;Although we should keep it sane and not overuse labels.&lt;/p&gt;
&lt;div class="section" id="statsd-by-datadog"&gt;
&lt;h2&gt;StatsD by Datadog&lt;/h2&gt;
&lt;p&gt;In &lt;a class="reference external" href="http://marselester.com/django-prometheus-via-statsd.html"&gt;the previous post&lt;/a&gt;
we used StatsD with statsd_exporter to forward metrics to Prometheus server.
StatsD protocol doesn't have a notion of labels,
but &lt;a class="reference external" href="https://docs.datadoghq.com/guides/dogstatsd/#tags"&gt;Datadog's fork&lt;/a&gt; has introduced tags.
Moreover statsd_exporter can convert them into Prometheus labels.&lt;/p&gt;
&lt;p&gt;Let's take it step by step.
Firstly, we need &lt;a class="reference external" href="https://github.com/DataDog/datadogpy"&gt;Datadog Python client&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install &lt;span class="nv"&gt;datadog&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.16.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Secondly, we should increment &amp;quot;weatherapi.responses.total&amp;quot; counter.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;weather&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datadog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;statsd&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;request_weather_forecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;forecast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Forecast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;weather&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;APIError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;statsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;weatherapi.responses.total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;code:{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;http_status_code&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;

    &lt;span class="n"&gt;statsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;weatherapi.responses.total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;code:200&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;forecast&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, since I made up the weather library, we can just run a Python script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datadog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;statsd&lt;/span&gt;
&lt;span class="n"&gt;statsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;weatherapi.responses.total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code:200&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, we should run statsd_exporter with disabled &amp;quot;-statsd.add-suffix&amp;quot; flag
which adds the metric type (counter/gauge/timer) as suffix to the generated Prometheus metric.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; statsd_exporter &lt;span class="se"&gt;\&lt;/span&gt;
    -statsd.listen-address&lt;span class="o"&gt;=&lt;/span&gt;:8125 &lt;span class="se"&gt;\&lt;/span&gt;
    -statsd.add-suffix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The statsd_exporter should expose our metric at &lt;a class="reference external" href="http://localhost:9102/metrics"&gt;http://localhost:9102/metrics&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# HELP weatherapi_responses_total Metric autogenerated by statsd_exporter.
# TYPE weatherapi_responses_total counter
weatherapi_responses_total{code=&amp;quot;200&amp;quot;} 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope this helps. Cheers!&lt;/p&gt;
&lt;/div&gt;
</content><category term="prometheus"></category><category term="monitoring"></category><category term="statsd"></category><category term="dogstatsd"></category><category term="datadog"></category></entry><entry><title>Instrumenting Django with Prometheus and StatsD</title><link href="http://marselester.com/django-prometheus-via-statsd.html" rel="alternate"></link><published>2017-06-09T00:00:00+07:00</published><updated>2017-06-09T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2017-06-09:/django-prometheus-via-statsd.html</id><summary type="html">&lt;p&gt;If you ever wondered how to monitor your Django application with Prometheus this article is for you.
Quick search on the topic will lead you to &lt;a class="reference external" href="https://github.com/korfuri/django-prometheus/"&gt;django-prometheus&lt;/a&gt;.
For those who don't want to use it, there is another way to export application metrics
via &lt;a class="reference external" href="https://www.datadoghq.com/blog/statsd/"&gt;StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to send …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you ever wondered how to monitor your Django application with Prometheus this article is for you.
Quick search on the topic will lead you to &lt;a class="reference external" href="https://github.com/korfuri/django-prometheus/"&gt;django-prometheus&lt;/a&gt;.
For those who don't want to use it, there is another way to export application metrics
via &lt;a class="reference external" href="https://www.datadoghq.com/blog/statsd/"&gt;StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to send metrics from Django by StatsD Python library to StatsD server over UDP.
Here is an example of incrementing &amp;quot;hello.requests.total&amp;quot; metric every time &amp;quot;say_hello&amp;quot; view is run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;statsd.defaults.django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;statsd&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;statsd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello.requests.total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;StatsD server aggregates measurements over time and flushes them into monitoring backend.
Here &lt;a class="reference external" href="https://github.com/prometheus/statsd_exporter"&gt;statsd_exporter&lt;/a&gt; comes into play.
It uses the same UDP protocol as StatsD server and exports StatsD-style metrics as Prometheus metrics,
so &amp;quot;hello.requests.total&amp;quot; becomes &amp;quot;hello_requests_total_counter&amp;quot;.&lt;/p&gt;
&lt;p&gt;All we need is to configure Django to send metrics to statsd_exporter daemon.
Let's set up &amp;quot;Olympus&amp;quot; Django project to demonstrate StatsD integration or
you can get it from &lt;a class="reference external" href="https://github.com/marselester/django-prometheus-via-statsd"&gt;github.com/marselester/django-prometheus-via-statsd&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; virtualenv venv
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; ./venv/bin/activate
&lt;span class="gp"&gt;$&lt;/span&gt; pip install &lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.11.1 &lt;span class="nv"&gt;statsd&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.2.1
&lt;span class="gp"&gt;$&lt;/span&gt; django-admin.py startproject olympus .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two lines of Django settings &lt;cite&gt;./olympus/settings.py&lt;/cite&gt; configure a default StatsD client
that is used in the &amp;quot;say_hello&amp;quot; Django view.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# statsd_exporter daemon listens to UDP at localhost:8125&lt;/span&gt;
&lt;span class="n"&gt;STATSD_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATSD_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8125&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming &amp;quot;say_hello&amp;quot; is available at &amp;quot;/hello&amp;quot; URL path, we can start a web server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py runserver
&lt;span class="gp"&gt;$&lt;/span&gt; curl http://localhost:8000/hello
&lt;span class="go"&gt;Hello, World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Olympus application is ready to emit metrics. To make sure this is the case,
we can use tcpdump to capture UDP packets on loopback interface on port 8125
and print each packet in ASCII.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tcpdump -i lo0 udp port &lt;span class="m"&gt;8125&lt;/span&gt; -A
&lt;span class="go"&gt;tcpdump: verbose output suppressed, use -v or -vv for full protocol decode&lt;/span&gt;
&lt;span class="go"&gt;listening on lo0, link-type NULL (BSD loopback), capture size 262144 bytes&lt;/span&gt;
&lt;span class="go"&gt;11:19:05.460810 IP localhost.57776 &amp;gt; localhost.8125: UDP, length 24&lt;/span&gt;
&lt;span class="go"&gt;E..4....@................ .3hello.requests.total:1|c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, &amp;quot;hello.requests.total:1|c&amp;quot; is sent every time we hit &lt;cite&gt;http://localhost:8000/hello&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;StatsD Exporter&lt;/h2&gt;
&lt;p&gt;Since we have StatsD metrics being sent, we can expose them for Prometheus via statsd_exporter.
Let's download the latest version and install it (the binary will be in &amp;quot;$GOPATH/bin/&amp;quot;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; go get -u github.com/prometheus/statsd_exporter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run statsd_exporter so it gets StatsD metrics from our Django application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; statsd_exporter -statsd.listen-address&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost:8125&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default it exposes generated Prometheus metrics at &lt;a class="reference external" href="http://localhost:9102/metrics"&gt;http://localhost:9102/metrics&lt;/a&gt;.
Check out the output, among many metrics there will be our counter from &amp;quot;say_hello&amp;quot; view.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# HELP hello_requests_total_counter Metric autogenerated by statsd_exporter.
# TYPE hello_requests_total_counter counter
hello_requests_total_counter 2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-everything-on-kubernetes"&gt;
&lt;h2&gt;Run Everything on Kubernetes&lt;/h2&gt;
&lt;p&gt;Of course we will deploy everything on Kubernetes.
Minikube will help us here.
Minukube is an easy way to run Kubernetes locally.
When we want to build a Docker image in Minukube (so Kubernetes has an access to it),
we can configure our Docker client to communicate with the Minikube Docker daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube start
&lt;span class="go"&gt;Starting local Kubernetes cluster...&lt;/span&gt;
&lt;span class="go"&gt;Kubectl is now configured to use the cluster.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;minikube docker-env&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="django-application"&gt;
&lt;h3&gt;Django application&lt;/h3&gt;
&lt;p&gt;First, we shall deploy our Django application with statsd_exporter running in the same Kubernetes Pod.
It exposes 8000 (uWSGI) and 9102 (statsd_exporter's generated Prometheus metrics) container ports.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; docker build -t marselester/olympus:v1.0.0 ./olympus-app/
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f ./kube/olympus-app/deployment.yml
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f ./kube/olympus-app/service.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Though we don't need Nginx in the demo, it's ubiquitous on production servers.
Nginx proxies HTTP requests using uWSGI protocol to &amp;quot;olympus-service&amp;quot; Kubernetes Service
we created above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create configmap olympus-nginx-conf --from-file&lt;span class="o"&gt;=&lt;/span&gt;./kube/nginx/olympus.conf
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f ./kube/nginx/deployment.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="prometheus"&gt;
&lt;h3&gt;Prometheus&lt;/h3&gt;
&lt;p&gt;Next is Prometheus server's turn to be deployed. It is configured to scrape
own metrics from 9102 port and metrics from Pods that have &amp;quot;app: olympus&amp;quot; label.&lt;/p&gt;
&lt;p&gt;Prometheus server listens on port 9090. On production servers you'll likely run
it behind Nginx with basic authentication and make it accessible via VPN only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create configmap prometheus-server-conf --from-file&lt;span class="o"&gt;=&lt;/span&gt;./kube/prometheus/prometheus.yml
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f ./kube/prometheus/deployment.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But in our case we'll use Kubernetes port forwarding to test whether Django
metrics show up in Prometheus dashboard.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl port-forward nginx-deployment-3580857522-tn332 &lt;span class="m"&gt;8080&lt;/span&gt;:80
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl port-forward prometheus-deployment-2456821496-8zdg8 &lt;span class="m"&gt;9090&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl http://localhost:8080/hello
&lt;span class="go"&gt;Hello, World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;quot;hello_requests_total_counter&amp;quot; should be searchable at the expression browser
&lt;a class="reference external" href="http://localhost:9090/graph"&gt;http://localhost:9090/graph&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prometheus-helm-chart"&gt;
&lt;h3&gt;Prometheus Helm Chart&lt;/h3&gt;
&lt;p&gt;There are other ways to install Prometheus on Kubernetes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/charts/tree/master/stable/prometheus"&gt;Helm&lt;/a&gt; (recommended Kubernetes &amp;gt;= 1.4.1)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/coreos/prometheus-operator"&gt;Prometheus Operator&lt;/a&gt; (requires Kubernetes &amp;gt;= 1.5.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prometheus Operator and Helm look awesome, though I have not played with Operator yet.
Here is how you can set up Prometheus via Helm (package manager for Kubernetes).
You will need the Helm client&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; brew install kubernetes-helm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and Helm server (Tiller). The following command installs it into the Kubernetes cluster.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; helm init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can install Prometheus Helm package (chart).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; helm repo update
&lt;span class="gp"&gt;$&lt;/span&gt; helm install --name team-ops stable/prometheus
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nice, we have full-blown Prometheus &amp;quot;team-ops&amp;quot; chart release running
with alert manager and node exporter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; helm list
&lt;span class="go"&gt;NAME        REVISION    UPDATED                     STATUS      CHART               NAMESPACE&lt;/span&gt;
&lt;span class="go"&gt;team-ops    1           Thu Jun  8 21:40:29 2017    DEPLOYED    prometheus-3.0.2    default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's add one more Prometheus to the cluster (call it &amp;quot;team-dev&amp;quot;),
but this time we want only Prometheus server with a custom prometheus.yml config.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; helm install --name team-dev &lt;span class="se"&gt;\&lt;/span&gt;
    --set alertmanager.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --set kubeStateMetrics.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --set nodeExporter.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    stable/prometheus
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The config is stored in &amp;quot;team-dev-prometheus-server&amp;quot; ConfigMap.
Let's overwrite it with our prometheus.yml.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create configmap team-dev-prometheus-server &lt;span class="se"&gt;\&lt;/span&gt;
    --from-file&lt;span class="o"&gt;=&lt;/span&gt;./kube/prometheus/prometheus.yml &lt;span class="se"&gt;\&lt;/span&gt;
    -o yaml &lt;span class="se"&gt;\&lt;/span&gt;
    --dry-run &lt;span class="p"&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see whether &amp;quot;team-dev&amp;quot; Prometheus started, we can run a port forwarding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl port-forward team-dev-prometheus-server-4131857549-c98j0 &lt;span class="m"&gt;9091&lt;/span&gt;:9090
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prometheus &amp;quot;team-dev&amp;quot; release is accessible at &lt;a class="reference external" href="http://localhost:9091/graph"&gt;http://localhost:9091/graph&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this helps. Cheers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="django"></category><category term="prometheus"></category><category term="kubernetes"></category><category term="monitoring"></category><category term="statsd"></category><category term="helm"></category></entry><entry><title>Minukube &amp; Amazon EC2 Container Registry</title><link href="http://marselester.com/minukube-aws-ecr.html" rel="alternate"></link><published>2016-12-05T00:00:00+07:00</published><updated>2016-12-05T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2016-12-05:/minukube-aws-ecr.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://kubernetes.io/docs/getting-started-guides/minikube/"&gt;Minukube&lt;/a&gt; is an easy way to run Kubernetes locally.
When we want to build a Docker image in Minukube (so Kubernetes has an access to it),
we can configure our Docker client to communicate with the Minikube Docker daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube start
&lt;span class="go"&gt;Starting local Kubernetes cluster...&lt;/span&gt;
&lt;span class="go"&gt;Kubectl is now configured to …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://kubernetes.io/docs/getting-started-guides/minikube/"&gt;Minukube&lt;/a&gt; is an easy way to run Kubernetes locally.
When we want to build a Docker image in Minukube (so Kubernetes has an access to it),
we can configure our Docker client to communicate with the Minikube Docker daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube start
&lt;span class="go"&gt;Starting local Kubernetes cluster...&lt;/span&gt;
&lt;span class="go"&gt;Kubectl is now configured to use the cluster.&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;minikube docker-env&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; docker build -t fizz/bazz:latest .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if we need to create a Kubernetes Deployment which pulls a Docker image from AWS ECR?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create -f - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;apiVersion: extensions/v1beta1&lt;/span&gt;
&lt;span class="go"&gt;kind: Deployment&lt;/span&gt;
&lt;span class="go"&gt;metadata:&lt;/span&gt;
&lt;span class="go"&gt;  name: my-deployment&lt;/span&gt;
&lt;span class="go"&gt;spec:&lt;/span&gt;
&lt;span class="go"&gt;  replicas: 1&lt;/span&gt;
&lt;span class="go"&gt;  template:&lt;/span&gt;
&lt;span class="go"&gt;    metadata:&lt;/span&gt;
&lt;span class="go"&gt;      labels:&lt;/span&gt;
&lt;span class="go"&gt;        app: my-app-name&lt;/span&gt;
&lt;span class="go"&gt;    spec:&lt;/span&gt;
&lt;span class="go"&gt;      containers:&lt;/span&gt;
&lt;span class="go"&gt;        - name: my-container-name&lt;/span&gt;
&lt;span class="go"&gt;          image: 4338991606.dkr.ecr.eu-west-1.amazonaws.com/fizz/bazz:latest&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kubernetes will fail to get the image due to authentication error (no credentials).
One of the solutions is to use &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/images/#specifying-imagepullsecrets-on-a-pod"&gt;imagePullSecrets&lt;/a&gt;.
The following command creates a secret for use with a Docker registry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create secret docker-registry my-docker-credentials &lt;span class="se"&gt;\&lt;/span&gt;
    --docker-server&lt;span class="o"&gt;=&lt;/span&gt;DOCKER_REGISTRY_SERVER &lt;span class="se"&gt;\&lt;/span&gt;
    --docker-username&lt;span class="o"&gt;=&lt;/span&gt;DOCKER_USER &lt;span class="se"&gt;\&lt;/span&gt;
    --docker-password&lt;span class="o"&gt;=&lt;/span&gt;DOCKER_PASSWORD &lt;span class="se"&gt;\&lt;/span&gt;
    --docker-email&lt;span class="o"&gt;=&lt;/span&gt;DOCKER_EMAIL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firstly, let's obtain &lt;strong&gt;DOCKER_USER&lt;/strong&gt; and &lt;strong&gt;DOCKER_PASSWORD&lt;/strong&gt;.
For that, we'll need &lt;strong&gt;awscli&lt;/strong&gt; Python library and environment variables
&lt;strong&gt;AWS_ACCESS_KEY_ID&lt;/strong&gt; and &lt;strong&gt;AWS_SECRET_ACCESS_KEY&lt;/strong&gt; set up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install awscli
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AKIAI44QH8DHBEXAMPLE&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Log in to Amazon ECR registry.
This aws command will display &lt;strong&gt;$ docker login&lt;/strong&gt; command. From its output we conclude that
&lt;strong&gt;DOCKER_USER&lt;/strong&gt; is &lt;strong&gt;AWS&lt;/strong&gt;, &lt;strong&gt;DOCKER_PASSWORD&lt;/strong&gt; is &lt;strong&gt;SomeVeryLongToken&lt;/strong&gt; and &lt;strong&gt;DOCKER_REGISTRY_SERVER&lt;/strong&gt;
is &lt;strong&gt;https://4338991606.dkr.ecr.eu-west-1.amazonaws.com&lt;/strong&gt; respectively.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; aws ecr get-login --region eu-west-1
&lt;span class="go"&gt;docker login -u AWS -p SomeVeryLongToken -e none https://4338991606.dkr.ecr.eu-west-1.amazonaws.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now it is time to create a docker-registry secret and update the Deployment manifest.
Note that we've added &lt;strong&gt;imagePullSecrets&lt;/strong&gt; which references our private registry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f - &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;apiVersion: extensions/v1beta1&lt;/span&gt;
&lt;span class="go"&gt;kind: Deployment&lt;/span&gt;
&lt;span class="go"&gt;metadata:&lt;/span&gt;
&lt;span class="go"&gt;  name: my-deployment&lt;/span&gt;
&lt;span class="go"&gt;spec:&lt;/span&gt;
&lt;span class="go"&gt;  replicas: 1&lt;/span&gt;
&lt;span class="go"&gt;  template:&lt;/span&gt;
&lt;span class="go"&gt;    metadata:&lt;/span&gt;
&lt;span class="go"&gt;      labels:&lt;/span&gt;
&lt;span class="go"&gt;        app: my-app-name&lt;/span&gt;
&lt;span class="go"&gt;    spec:&lt;/span&gt;
&lt;span class="go"&gt;      containers:&lt;/span&gt;
&lt;span class="go"&gt;        - name: my-container-name&lt;/span&gt;
&lt;span class="go"&gt;          image: 4338991606.dkr.ecr.eu-west-1.amazonaws.com/fizz/bazz:latest&lt;/span&gt;
&lt;span class="go"&gt;      imagePullSecrets:&lt;/span&gt;
&lt;span class="go"&gt;        - name: my-docker-credentials&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kubernetes should be able to pull the image from Amazon Container Registry.&lt;/p&gt;
</content><category term="kubernetes"></category><category term="aws"></category><category term="minukube"></category></entry><entry><title>Prometheus on Kubernetes</title><link href="http://marselester.com/prometheus-on-kubernetes.html" rel="alternate"></link><published>2016-11-13T00:00:00+07:00</published><updated>2016-11-13T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2016-11-13:/prometheus-on-kubernetes.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is a monitoring toolkit.
Let's set it up on Kubernetes and test how it works by scraping HTTP request metrics
from &lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes"&gt;hello web application&lt;/a&gt;
which also runs in the same cluster.&lt;/p&gt;
&lt;p&gt;First of all, we need Kubernetes cluster running. It's easy to bootstrap one via &lt;a class="reference external" href="https://console.cloud.google.com"&gt;Google Container Engine&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcloud …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is a monitoring toolkit.
Let's set it up on Kubernetes and test how it works by scraping HTTP request metrics
from &lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes"&gt;hello web application&lt;/a&gt;
which also runs in the same cluster.&lt;/p&gt;
&lt;p&gt;First of all, we need Kubernetes cluster running. It's easy to bootstrap one via &lt;a class="reference external" href="https://console.cloud.google.com"&gt;Google Container Engine&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcloud container clusters create my-k8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command above might complain that zone is not currently set.
Choose the one you like and try to create a cluster again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcloud compute zones list
&lt;span class="gp"&gt;$&lt;/span&gt; gcloud config &lt;span class="nb"&gt;set&lt;/span&gt; compute/zone asia-east1-b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should now have a Kubernetes cluster.
If there are any issues, check out &lt;a class="reference external" href="https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615"&gt;Udacity course&lt;/a&gt; which helped me run Kubernetes in GKE.&lt;/p&gt;
&lt;div class="section" id="first-start"&gt;
&lt;h2&gt;First Start&lt;/h2&gt;
&lt;p&gt;Prometheus is available as Docker image and can be run locally quickly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; docker run -p &lt;span class="m"&gt;9090&lt;/span&gt;:9090 prom/prometheus:v1.2.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a container is started, the Prometheus expression browser should be accessible on &lt;cite&gt;http://localhost:9090&lt;/cite&gt;.
Now let's achieve the same results with Kubernetes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl run prometheus-deployment --image&lt;span class="o"&gt;=&lt;/span&gt;prom/prometheus:v1.2.1 --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9090&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command above created &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/deployments/"&gt;Kubernetes Deployment&lt;/a&gt;
that runs &lt;cite&gt;prometheus&lt;/cite&gt; Docker image.&lt;/p&gt;
&lt;p&gt;By default deployed applications are visible only inside the Kubernetes cluster.
To see whether Prometheus started up, we can run a proxy between terminal and Kubernetes cluster.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl proxy
&lt;span class="go"&gt;Starting to serve on 127.0.0.1:8001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In another cloud shell, we can call Kubernetes API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl get pods
&lt;span class="go"&gt;NAME                                     READY     STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span class="go"&gt;prometheus-deployment-2234044252-of29y   1/1       Running   0          8m&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; curl http://127.0.0.1:8001/api/v1/proxy/namespaces/default/pods/prometheus-deployment-2234044252-of29y:9090/metrics
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another option is to run a port forwarding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl port-forward prometheus-deployment-2234044252-of29y &lt;span class="m"&gt;8080&lt;/span&gt;:9090
&lt;span class="gp"&gt;$&lt;/span&gt; curl http://127.0.0.1:8080/metrics
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check Prometheus container logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl logs -f po/prometheus-deployment-2234044252-of29y
&lt;span class="go"&gt;time=&amp;quot;2016-10-29T05:02:38Z&amp;quot; level=info msg=&amp;quot;Starting prometheus (version=1.2.1, branch=master, revision=dd66f2e94b2b662804b9aa1b6a50587b990ba8b7)&amp;quot; source=&amp;quot;main.go:75&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we can run a shell inside the Pod's container and have a look at Prometheus config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; prometheus-deployment-2234044252-of29y -it /bin/sh
&lt;span class="go"&gt;root$ cat /etc/prometheus/prometheus.yml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Its advisable to describe Deployments in configuration files,
so we can have a better visibility and version control over our cluster.
The following Deployment manifest is similar to what we achieved with &lt;cite&gt;kubectl run&lt;/cite&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus-deployment&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# tells deployment to run 1 pod matching the template below&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# crete pods using pod definition in this template&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# these key value pairs will be attached to pods&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus-server&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prom/prometheus:v1.2.1&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;containerPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9090&lt;/span&gt; &lt;span class="c1"&gt;# port we open in the container&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's delete &lt;cite&gt;prometheus-deployment&lt;/cite&gt; we created via &lt;cite&gt;kubectl run&lt;/cite&gt; command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl delete deployment prometheus-deployment
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and re-create the Deployment from a file (it is available in git repository):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/marselester/prometheus-on-kubernetes.git
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ./prometheus-on-kubernetes/
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create -f kube/prometheus/deployment-v1.yml
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl get deployments
&lt;span class="go"&gt;NAME                    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE&lt;/span&gt;
&lt;span class="go"&gt;prometheus-deployment   1         1         1            0           40s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="prometheus-service"&gt;
&lt;h2&gt;Prometheus Service&lt;/h2&gt;
&lt;p&gt;We have a Prometheus Pod running.
Now we need &lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/services/"&gt;Kubernetes Service&lt;/a&gt; to let external clients access it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl expose deployment prometheus-deployment --type&lt;span class="o"&gt;=&lt;/span&gt;NodePort --name&lt;span class="o"&gt;=&lt;/span&gt;prometheus-service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The assigned port can be found in &lt;cite&gt;NodePort&lt;/cite&gt; output of Service description:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl describe service prometheus-service
&lt;span class="gp"&gt;#&lt;/span&gt; ...
&lt;span class="go"&gt;NodePort:               &amp;lt;unset&amp;gt; 32514/TCP&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have exposed the Service on an external port &lt;cite&gt;32514&lt;/cite&gt; on all nodes in our cluster.
Now create a firewall rule to allow external traffic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcloud compute firewall-rules create prometheus-nodeport --allow&lt;span class="o"&gt;=&lt;/span&gt;tcp:32514
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's use one of the external IPs from our Kubernetes cluster instances to see Prometheus expression browser.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcloud compute instances list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should be able to access Prometheus on &lt;cite&gt;http://&amp;lt;EXTERNAL_IP&amp;gt;:32514&lt;/cite&gt;.
Let's delete the Service and create it via Service config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl delete service prometheus-service
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create -f kube/prometheus/service-v1.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the Prometheus Pod exposes &lt;cite&gt;9090&lt;/cite&gt; port and has &lt;cite&gt;app: prometheus-server&lt;/cite&gt; label,
our config should be as following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Service&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus-service&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;selector&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# exposes any pods with the following labels as a service&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prometheus-server&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;NodePort&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt; &lt;span class="c1"&gt;# this Service&amp;#39;s port (cluster-internal IP clusterIP)&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targetPort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;9090&lt;/span&gt; &lt;span class="c1"&gt;# pods expose this port&lt;/span&gt;
      &lt;span class="c1"&gt;# Kubernetes master will allocate a port from a flag-configured range (default: 30000-32767),&lt;/span&gt;
      &lt;span class="c1"&gt;# or we can set a specific port number (in our case).&lt;/span&gt;
      &lt;span class="c1"&gt;# Each node will proxy 32514 port (the same port number on every node) into this service.&lt;/span&gt;
      &lt;span class="c1"&gt;# Note that this Service will be visible as both NodeIP:nodePort and clusterIp:port&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nodePort&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;32514&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="prometheus-config"&gt;
&lt;h2&gt;Prometheus Config&lt;/h2&gt;
&lt;p&gt;So far we've been using the default Prometheus config which is part of a Docker image.
For sure we will need to update it so Prometheus can collect metrics from our example app.
Let's take the default config as a starting point and store it in
&lt;a class="reference external" href="http://kubernetes.io/docs/user-guide/configmap/"&gt;Kubernetes ConfigMap&lt;/a&gt;.
The config can be copied from the running container or from the git repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; prometheus-deployment-2234044252-of29y -it cat /etc/prometheus/prometheus.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to create a ConfigMap entry for the &lt;cite&gt;prometheus.yml&lt;/cite&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create configmap prometheus-server-conf --from-file&lt;span class="o"&gt;=&lt;/span&gt;prometheus.yml&lt;span class="o"&gt;=&lt;/span&gt;kube/prometheus/config-v1.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let's mount &lt;cite&gt;prometheus-server-conf&lt;/cite&gt; ConfigMap volume to our Prometheus Pod&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f kube/prometheus/deployment-v2.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and store metrics in emptyDir volume, so we don't lose them when a container in the Pod crashes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f kube/prometheus/deployment-v3.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-app-metrics"&gt;
&lt;h2&gt;Sending App Metrics&lt;/h2&gt;
&lt;p&gt;We have a Prometheus running in Kubernetes but we have no application to monitor.
I wrote &lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes/blob/master/hello-app/v1/main.go"&gt;hello-app/v1&lt;/a&gt; web app that exposes &lt;cite&gt;/hello&lt;/cite&gt; HTTP endpoint.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://youtu.be/HkEZ1LJ7kzQ?list=PLDWZ5uzn69eyh791ZTkEA9OaTxVpGY8_g"&gt;Björn Rabenstein in his talk&lt;/a&gt;
explains how to instrument your code to expose metrics to Prometheus.
Our application is not forced to use Prometheus client to expose metrics.
We can create &lt;cite&gt;/metrics&lt;/cite&gt; HTTP endpoint manually in the following text format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# HELP http_requests_total Number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{code=&amp;quot;200&amp;quot;,method=&amp;quot;get&amp;quot;} 2384
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it's much easier to use a library
(see &lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes/blob/master/hello-app/v2/main.go"&gt;hello-app/v2&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/prometheus/client_golang/prometheus/promhttp&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/metrics&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;promhttp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the app has &lt;cite&gt;/metrics&lt;/cite&gt; endpoint with Go runtime metrics (number of goroutines, GC statistics).&lt;/p&gt;
&lt;p&gt;Our app exposes an important endpoint &lt;cite&gt;/hello&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;helloHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;doSomeWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's instrument &lt;cite&gt;helloHandler()&lt;/cite&gt; to count HTTP requests and their durations.
First, we need to define metrics.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/prometheus/client_golang/prometheus&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// How often our /hello request durations fall into one of the defined buckets.&lt;/span&gt;
    &lt;span class="c1"&gt;// We can use default buckets or set ones we are interested in.&lt;/span&gt;
    &lt;span class="nx"&gt;duration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewHistogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HistogramOpts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;hello_request_duration_seconds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Help&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;Histogram of the /hello request duration.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Buckets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="c1"&gt;// Counter vector to which we can attach labels. That creates many key-value&lt;/span&gt;
    &lt;span class="c1"&gt;// label combinations. So in our case we count requests by status code separetly.&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewCounterVec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CounterOpts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello_requests_total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;Help&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total number of /hello requests.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// init registers Prometheus metrics.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MustRegister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MustRegister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, measure a request duration in seconds and increase the counter in the &lt;cite&gt;helloHandler()&lt;/cite&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;helloHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;

    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;begun&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Since&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;begun&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Seconds&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="c1"&gt;// hello_requests_total{status=&amp;quot;200&amp;quot;} 2385&lt;/span&gt;
        &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;With&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prometheus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;Inc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doSomeWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, World!\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes/blob/master/hello-app/v3/main.go"&gt;hello-app/v3&lt;/a&gt;
is used in further examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-app-demo"&gt;
&lt;h2&gt;Hello App Demo&lt;/h2&gt;
&lt;p&gt;Next step is to run the web app in Kubernetes.
A Docker image of the &lt;cite&gt;hello-app/v3&lt;/cite&gt; is available on Docker Hub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f kube/hello/deployment-v1.yml
&lt;span class="gp"&gt;$&lt;/span&gt; kubectl port-forward hello-deployment-1471727270-eaknp &lt;span class="m"&gt;8000&lt;/span&gt;:8000
&lt;span class="gp"&gt;$&lt;/span&gt; curl localhost:8000/hello
&lt;span class="go"&gt;Hello, World!&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl localhost:8000/metrics
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; HELP hello_request_duration_seconds Histogram of the /hello request duration.
&lt;span class="gp"&gt;#&lt;/span&gt; TYPE hello_request_duration_seconds histogram
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;0.01&amp;quot;} 0&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;0.025&amp;quot;} 0&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;0.05&amp;quot;} 0&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;0.1&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;0.25&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;0.5&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;1&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;2.5&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;5&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;10&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_bucket{le=&amp;quot;+Inf&amp;quot;} 1&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_sum 0.083953974&lt;/span&gt;
&lt;span class="go"&gt;hello_request_duration_seconds_count 1&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; HELP hello_requests_total Total number of /hello requests.
&lt;span class="gp"&gt;#&lt;/span&gt; TYPE hello_requests_total counter
&lt;span class="go"&gt;hello_requests_total{status=&amp;quot;500&amp;quot;} 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Service creation is similar to what we have already done before.
We use &lt;cite&gt;32515&lt;/cite&gt; NodePort here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl apply -f kube/hello/service-v1.yml
&lt;span class="gp"&gt;$&lt;/span&gt; gcloud compute firewall-rules create hello-nodeport --allow&lt;span class="o"&gt;=&lt;/span&gt;tcp:32515
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now it is possible to see the app's metrics from Internet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl http://&amp;lt;EXTERNAL_IP&amp;gt;:32515/metrics
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-prometheus"&gt;
&lt;h2&gt;Hello Prometheus&lt;/h2&gt;
&lt;p&gt;Since the web app is run on Kubernetes, we can configure Prometheus
to scrape metrics from &lt;cite&gt;/metrics&lt;/cite&gt; HTTP endpoint of hello-app Pods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;global&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scrape_interval&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5s&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;evaluation_interval&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5s&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scrape_configs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;job_name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;prometheus&amp;#39;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;static_configs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;targets&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost:9090&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;job_name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# The information to access the Kubernetes API to discover targets.&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;api_servers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://kubernetes.default.svc&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# Prometheus assumes it is being run inside a Kubernetes pod.&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;in_cluster&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
        &lt;span class="c1"&gt;# Only pods should be discovered.&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;role&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pod&lt;/span&gt;
    &lt;span class="c1"&gt;# Prometheus collects metrics from pods with &amp;quot;app: hello-server&amp;quot; label.&lt;/span&gt;
    &lt;span class="c1"&gt;# Prometheus gets &amp;#39;hello_requests_total{status=&amp;quot;500&amp;quot;} 1&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# from hello:8000/metrics and adds &amp;quot;job&amp;quot; and &amp;quot;instance&amp;quot; labels, so it becomes&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;hello_requests_total{instance=&amp;quot;10.16.0.10:8000&amp;quot;,job=&amp;quot;hello&amp;quot;,status=&amp;quot;500&amp;quot;} 1&amp;#39;.&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;relabel_configs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source_labels&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;__meta_kubernetes_pod_label_app&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;regex&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;hello-server&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;action&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;keep&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update a ConfigMap of Prometheus config and re-create a Prometheus Pod so it picks up changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; kubectl create configmap prometheus-server-conf &lt;span class="se"&gt;\&lt;/span&gt;
    --from-file&lt;span class="o"&gt;=&lt;/span&gt;prometheus.yml&lt;span class="o"&gt;=&lt;/span&gt;kube/prometheus/config-v2.yaml &lt;span class="se"&gt;\&lt;/span&gt;
    -o yaml &lt;span class="se"&gt;\&lt;/span&gt;
    --dry-run &lt;span class="p"&gt;|&lt;/span&gt; kubectl replace -f -
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the app's metrics should show up in Prometheus expression browser &lt;cite&gt;http://&amp;lt;EXTERNAL_IP&amp;gt;:32514&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;You can try to query &lt;cite&gt;hello_requests_total&lt;/cite&gt; which shows how many requests we've served since the beginning.
Let's see how many requests we've served in last 5 minutes normalised per second (QPS)
with &lt;cite&gt;rate(hello_requests_total[5m])&lt;/cite&gt; query.&lt;/p&gt;
&lt;p&gt;Here I gave an example of how to run Prometheus in Kubernetes cluster
and collect metrics from a simple web app.
However recently I have encountered CoreOS &lt;a class="reference external" href="https://github.com/coreos/kube-prometheus"&gt;kube-prometheus&lt;/a&gt;
which makes it easier. Have a look at &lt;a class="reference external" href="https://coreos.com/blog/the-prometheus-operator.html"&gt;The Prometheus Operator: Managed Prometheus setups for Kubernetes&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
</content><category term="prometheus"></category><category term="kubernetes"></category><category term="monitoring"></category><category term="golang"></category><category term="Google Container Engine"></category></entry><entry><title>Django REST framework: pagination on PostgreSQL triggers</title><link href="http://marselester.com/drf-pagination.html" rel="alternate"></link><published>2016-04-02T00:00:00+07:00</published><updated>2016-04-02T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2016-04-02:/drf-pagination.html</id><summary type="html">&lt;p&gt;Django and Django REST Framework use SQL COUNT in pagination.
As your database grows SQL COUNT becomes too slow. Fortunately the frameworks
are well designed and allow to customize a way items are count.
Let me illustrate that on a typical &amp;quot;books&amp;quot; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Django and Django REST Framework use SQL COUNT in pagination.
As your database grows SQL COUNT becomes too slow. Fortunately the frameworks
are well designed and allow to customize a way items are count.
Let me illustrate that on a typical &amp;quot;books&amp;quot; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;books&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;book&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It has been working fine for some time but authors are so productive and wrote thousands of books.
As a result &lt;tt class="docutils literal"&gt;alice.books.count()&lt;/tt&gt; takes a few seconds to execute.
One option is to store books count in &lt;tt class="docutils literal"&gt;Author&lt;/tt&gt; model which might be helpful in
other SQL queries. Another one is to keep count somewhere else, e.g., Redis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;tt class="docutils literal"&gt;books_count&lt;/tt&gt; is nullable due to existing data on production servers.
Setting a default value &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; on schema migration would take long to update
every author record, also it's hard to tell whether an author record is
already migrated (&lt;tt class="docutils literal"&gt;books_count&lt;/tt&gt; is calculated or not).&lt;/p&gt;
&lt;p&gt;Now we have &lt;tt class="docutils literal"&gt;Author.books_count&lt;/tt&gt; field which should keep track of new books.
You can implement that based on Django signals or SQL triggers.&lt;/p&gt;
&lt;p&gt;Signals might fail, even with &lt;tt class="docutils literal"&gt;send_robust&lt;/tt&gt;. Updating a books count in
a signal receiver slows down an application (two to three DB queries and
acquiring a DB lock on author record):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@receiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_save&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dispatch_uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;update_author_books_count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_author_books_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_for_update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moving an update logic from a signal receiver to Celery task doesn't look
promising -- &lt;tt class="docutils literal"&gt;books_count&lt;/tt&gt; would be inconsistent between a task trigger and
its execution or simply Celery task might fail. Another issue is that
a model signal is not &amp;quot;attached&amp;quot; to DB transaction. For example,
a Celery task is run before a DB transaction is committed.
That is usually quick fixed with &lt;tt class="docutils literal"&gt;task_name.apply_async(countdown=1)&lt;/tt&gt;
to delay a task execution, but I would rather recommend something like
&lt;a class="reference external" href="https://django-transaction-hooks.readthedocs.org/en/latest/"&gt;django-transaction-hooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What about SQL trigger option? A bad thing is that a business logic leaks from an app to DB.
But with a good documentation and tests it's maintainable: SQL code is stored in
a data migration module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py makemigrations --empty yourappname
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;

&lt;span class="n"&gt;CREATE_FUNCTION_SQL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;CREATE OR REPLACE FUNCTION update_books_count_on_author() RETURNS trigger AS $$&lt;/span&gt;
&lt;span class="s2"&gt;    BEGIN&lt;/span&gt;
&lt;span class="s2"&gt;        UPDATE author SET books_count =&lt;/span&gt;
&lt;span class="s2"&gt;            CASE&lt;/span&gt;
&lt;span class="s2"&gt;                WHEN books_count IS NULL THEN (&lt;/span&gt;
&lt;span class="s2"&gt;                    SELECT count(*) FROM book WHERE author_id = author.id&lt;/span&gt;
&lt;span class="s2"&gt;                )&lt;/span&gt;
&lt;span class="s2"&gt;                ELSE books_count + 1&lt;/span&gt;
&lt;span class="s2"&gt;            END&lt;/span&gt;
&lt;span class="s2"&gt;        WHERE id = NEW.author_id;&lt;/span&gt;

&lt;span class="s2"&gt;        RETURN NEW;&lt;/span&gt;
&lt;span class="s2"&gt;    END;&lt;/span&gt;
&lt;span class="s2"&gt;$$ LANGUAGE plpgsql;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;CREATE_TRIGGER_SQL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;CREATE TRIGGER books_count_update&lt;/span&gt;
&lt;span class="s2"&gt;    AFTER INSERT ON book&lt;/span&gt;
&lt;span class="s2"&gt;    FOR EACH ROW&lt;/span&gt;
&lt;span class="s2"&gt;    EXECUTE PROCEDURE update_books_count_on_author();&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CREATE_FUNCTION_SQL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunSQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CREATE_TRIGGER_SQL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a pitfall though. When a new book is created and author is updated on the
same DB transaction, then &lt;tt class="docutils literal"&gt;books_count&lt;/tt&gt; value might be overwritten.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_for_update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can either explicitly list fields to update &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;author.save(update_fields=['name'])&lt;/span&gt;&lt;/tt&gt;
or use &lt;a class="reference external" href="https://django-save-the-change.readthedocs.org/en/latest/"&gt;django-save-the-change&lt;/a&gt;. Let's document that in the model docstring.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;save_the_change.mixins&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SaveTheChange&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SaveTheChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Author, e.g., Terry Pratchett.&lt;/span&gt;

&lt;span class="sd"&gt;    :attribute books_count: How many books writer has. SQL COUNT is&lt;/span&gt;
&lt;span class="sd"&gt;        expensive operation, so we store calculated value and update it&lt;/span&gt;
&lt;span class="sd"&gt;        by SQL trigger (check a data migration module for details).&lt;/span&gt;
&lt;span class="sd"&gt;        It&amp;#39;s important to save only fields that were updated in the model.&lt;/span&gt;
&lt;span class="sd"&gt;        Otherwise SQL trigger&amp;#39;s results are overwritten by Django ORM.&lt;/span&gt;
&lt;span class="sd"&gt;        For example:&lt;/span&gt;

&lt;span class="sd"&gt;        1. author is requested with a lock (books_count = 1)&lt;/span&gt;
&lt;span class="sd"&gt;        2. new book is created&lt;/span&gt;
&lt;span class="sd"&gt;        3. SQL trigger updates author&amp;#39;s books_count field (now it is 2)&lt;/span&gt;
&lt;span class="sd"&gt;        4. author instance is saved with the old value of books_count = 1.&lt;/span&gt;

&lt;span class="sd"&gt;        SaveTheChange mixin helps to prevent it.&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To benefit from &lt;tt class="docutils literal"&gt;books_count&lt;/tt&gt; field in Django REST Framework we need
a custom pagination class which implements &lt;tt class="docutils literal"&gt;Paginator.count&lt;/tt&gt; property.
The idea is to extract author ID from paginator's SQL, query a books count
from &lt;tt class="docutils literal"&gt;Author&lt;/tt&gt; model and return it, instead of default
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Book.objects.filter(author_id=author_id).count()&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.paginator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pagination&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.viewsets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ReadOnlyModelViewSet&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ReadOnlyModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pagination_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BookPagination&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookPagination&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PageNumberPagination&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;django_paginator_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CachedBookCountPaginator&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CachedBookCountPaginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return the total number of books, across all pages.&lt;/span&gt;

&lt;span class="sd"&gt;        It parses a SQL and learns what author ID was requested&lt;/span&gt;
&lt;span class="sd"&gt;        based on ``self.object_list.query``. After that we can get&lt;/span&gt;
&lt;span class="sd"&gt;        a cached books count from Author model.&lt;/span&gt;

&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# There is query.where, but I could&amp;#39;t find an author ID easily.&lt;/span&gt;
        &lt;span class="c1"&gt;# Moreover query.where internals might be changed.&lt;/span&gt;
        &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;author_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_author_id_from_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;books_count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# In case we got unsynced author, we fallback to SQL COUNT.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books_count&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Request books count from DB.&lt;/span&gt;

&lt;span class="sd"&gt;        We need this method to facilitate testing (mocks).&lt;/span&gt;

&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CachedBookCountPaginator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;

&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_author_id_from_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope this helps. Cheers!&lt;/p&gt;
</content><category term="python"></category><category term="django"></category><category term="postgresql"></category><category term="django rest framework"></category><category term="pagination"></category></entry><entry><title>API based on Flask</title><link href="http://marselester.com/api-based-on-flask.html" rel="alternate"></link><published>2013-12-09T00:00:00+07:00</published><updated>2013-12-09T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2013-12-09:/api-based-on-flask.html</id><summary type="html">&lt;p&gt;Here I want to consider implementation of API best practices which
usually don't follow Fielding's REST strictly. &lt;a class="reference external" href="https://github.com/marselester/api-example-based-on-flask"&gt;Example Flask project&lt;/a&gt;
is on GitHub.&lt;/p&gt;
&lt;div class="section" id="api-versioning"&gt;
&lt;h2&gt;API Versioning&lt;/h2&gt;
&lt;p&gt;Interfaces are changed hence versioning is mandatory in order to not annoy
your users. You might need to add new resource or field to particular …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here I want to consider implementation of API best practices which
usually don't follow Fielding's REST strictly. &lt;a class="reference external" href="https://github.com/marselester/api-example-based-on-flask"&gt;Example Flask project&lt;/a&gt;
is on GitHub.&lt;/p&gt;
&lt;div class="section" id="api-versioning"&gt;
&lt;h2&gt;API Versioning&lt;/h2&gt;
&lt;p&gt;Interfaces are changed hence versioning is mandatory in order to not annoy
your users. You might need to add new resource or field to particular resource.
You write code, tests and update documentation. Users are happy.
It's possible that you have to rename or delete field of some resource.
This case is harder and you might make the easiest decision — spawn
a lot of &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements and write more tests consequently.
Code base maintaining is getting worse.&lt;/p&gt;
&lt;p&gt;I think it's better to make API versions isolated.
It will keep things simple and tests as well. You may even want to change
framework if legacy API implementation is not good enough.
For example, you have two WSGI applications. Each application implements
certain API version, e.g, &lt;strong&gt;messaging_api_v1&lt;/strong&gt;, &lt;strong&gt;messaging_api_v2&lt;/strong&gt;.
In order to hide versioning information from applications, e.g., URL prefix,
you can dispatch requests by Werkzeug's &lt;tt class="docutils literal"&gt;DispatcherMiddleware&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DispatcherMiddleware&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;messaging_api_v1&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;messaging_api_v2&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispatcherMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/v1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;messaging_api_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/v2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;messaging_api_v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dispatcher in work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gunicorn messaging_api:app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's request the same API resource from different WSGI applications:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl http://127.0.0.1:8000/v1/messages/1
&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;content&amp;quot;: &amp;quot;hi world from V1&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; curl http://127.0.0.1:8000/v2/messages/1
&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;content&amp;quot;: &amp;quot;hi world from V2&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="urls"&gt;
&lt;h2&gt;URLs&lt;/h2&gt;
&lt;p&gt;API resources are nouns, so &lt;tt class="docutils literal"&gt;/messages/&lt;/tt&gt; URL is for a collection of messages.
You should think about it as UNIX folder. Hence &lt;tt class="docutils literal"&gt;/messages&lt;/tt&gt; is correct
folder path and Flask will redirect to the canonical URL &lt;tt class="docutils literal"&gt;/messages/&lt;/tt&gt;.
Certain message's &lt;tt class="docutils literal"&gt;/messages/1&lt;/tt&gt; URL must not contain trailing slash
in order to look like UNIX file path.&lt;/p&gt;
&lt;p&gt;Resources usually have relationships and they might be expressed in URLs,
e.g., get messages from account which id is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl https://api.example.com/v1/accounts/1/messages/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="representation"&gt;
&lt;h2&gt;Representation&lt;/h2&gt;
&lt;p&gt;There are two popular approaches to specify response format. First one
is based on &lt;strong&gt;Accept&lt;/strong&gt; header, second — URL based. Here I use header based
approach.&lt;/p&gt;
&lt;p&gt;I wrote &lt;a class="reference external" href="https://github.com/marselester/flask-api-utils#accept-header-based-response"&gt;ResponsiveFlask&lt;/a&gt; class which extends &lt;tt class="docutils literal"&gt;Flask&lt;/tt&gt; by supporting
dictionary response. Views can return dict and it will be represented
based on &lt;strong&gt;Accept&lt;/strong&gt; header. When &lt;tt class="docutils literal"&gt;ResponsiveFlask.make_response()&lt;/tt&gt; receives
dictionary it creates real response object using appropriate formatter.
Formatter is picked by mimetype.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl http://127.0.0.1:8000/v2/messages/1 -i -H &lt;span class="s1"&gt;&amp;#39;Accept: application/json&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;HTTP/1.1 200 OK&lt;/span&gt;
&lt;span class="go"&gt;Server: gunicorn/18.0&lt;/span&gt;
&lt;span class="go"&gt;Date: Tue, 10 Dec 2013 07:52:31 GMT&lt;/span&gt;
&lt;span class="go"&gt;Connection: close&lt;/span&gt;
&lt;span class="go"&gt;Content-Type: application/json&lt;/span&gt;
&lt;span class="go"&gt;Content-Length: 35&lt;/span&gt;

&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;content&amp;quot;: &amp;quot;hi world from V2&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="error-handling"&gt;
&lt;h2&gt;Error Handling&lt;/h2&gt;
&lt;p&gt;Flask shows error pages by default with basic description in
&lt;strong&gt;text/html&lt;/strong&gt; format. It would be better if error representation depends
on &lt;strong&gt;Accept&lt;/strong&gt; header. &lt;tt class="docutils literal"&gt;ResponsiveFlask&lt;/tt&gt; class concerns about it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl http://127.0.0.1:8000/v2/messages/666 -i
&lt;span class="go"&gt;HTTP/1.1 404 NOT FOUND&lt;/span&gt;
&lt;span class="go"&gt;Server: gunicorn/18.0&lt;/span&gt;
&lt;span class="go"&gt;Date: Fri, 03 Jan 2014 05:16:03 GMT&lt;/span&gt;
&lt;span class="go"&gt;Connection: close&lt;/span&gt;
&lt;span class="go"&gt;Content-Type: application/json&lt;/span&gt;
&lt;span class="go"&gt;Content-Length: 49&lt;/span&gt;

&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;code&amp;quot;: 404,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;message&amp;quot;: &amp;quot;404: Not Found&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can set your own HTTP error handler by using
&lt;a class="reference external" href="https://github.com/marselester/flask-api-utils#error-handling"&gt;app.default_errorhandler&lt;/a&gt; decorator. Note that it might override
already defined error handlers, so you should declare it before them.&lt;/p&gt;
&lt;p&gt;It's convenient to add URL of detailed error description into response.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;code&amp;quot;: 404,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;info_url&amp;quot;: &amp;quot;http://developer.example.com/errors.html#error-code-404&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;message&amp;quot;: &amp;quot;404: Not Found&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="misc"&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;p&gt;It's good idea to keep in mind following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;HTTPS;&lt;/li&gt;
&lt;li&gt;response should contain resource url, e.g.,
&lt;tt class="docutils literal"&gt;{'url': &lt;span class="pre"&gt;'https://api.example.com/v2/messages/1'}&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;pagination by &lt;tt class="docutils literal"&gt;offset&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;limit&lt;/tt&gt; QS arguments with default values;&lt;/li&gt;
&lt;li&gt;filtration and search by QS arguments;&lt;/li&gt;
&lt;li&gt;partial response by &lt;tt class="docutils literal"&gt;fields=id,lastname&lt;/tt&gt; QS argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="flask"></category><category term="api"></category></entry><entry><title>Slides about SaltStack</title><link href="http://marselester.com/saltstack-slides.html" rel="alternate"></link><published>2013-12-03T00:00:00+07:00</published><updated>2013-12-03T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2013-12-03:/saltstack-slides.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; I gave a talk with &lt;a class="reference external" href="https://twitter.com/shr"&gt;Simon Robson&lt;/a&gt; at &lt;a class="reference external" href="https://twitter.com/barcampcm"&gt;Beercamp&lt;/a&gt; in Chiang Mai,
Thailand on 12 Dec 2013. We compared Salt and &lt;a class="reference external" href="http://slid.es/simonrobson/ansible"&gt;Ansible&lt;/a&gt;.
Here are my slides.&lt;/p&gt;
&lt;iframe src="http://slid.es/marselester/saltstack/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; I gave a talk with &lt;a class="reference external" href="https://twitter.com/shr"&gt;Simon Robson&lt;/a&gt; at &lt;a class="reference external" href="https://twitter.com/barcampcm"&gt;Beercamp&lt;/a&gt; in Chiang Mai,
Thailand on 12 Dec 2013. We compared Salt and &lt;a class="reference external" href="http://slid.es/simonrobson/ansible"&gt;Ansible&lt;/a&gt;.
Here are my slides.&lt;/p&gt;
&lt;iframe src="http://slid.es/marselester/saltstack/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</content><category term="salt"></category><category term="saltstack"></category><category term="slides"></category><category term="talk"></category></entry><entry><title>Developing &amp; Deploying Django project with SaltStack</title><link href="http://marselester.com/developing-and-deploying-django-project-with-saltstack.html" rel="alternate"></link><published>2013-11-28T00:00:00+07:00</published><updated>2013-11-28T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2013-11-28:/developing-and-deploying-django-project-with-saltstack.html</id><summary type="html">&lt;p&gt;Eventually you will need to deploy project,
but deployment was not considered in the &lt;a class="reference external" href="http://marselester.com/developing-django-project-with-saltstack.html"&gt;previous post&lt;/a&gt;. Let's find it out.&lt;/p&gt;
&lt;p&gt;Server configuration is different from local, thus environments will be needed
(at least production &lt;strong&gt;prod&lt;/strong&gt; and development &lt;strong&gt;dev&lt;/strong&gt;). Salt uses &lt;strong&gt;base&lt;/strong&gt;
environment by default.&lt;/p&gt;
&lt;p&gt;Environments are set in &lt;tt class="docutils literal"&gt;minion.conf …&lt;/tt&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eventually you will need to deploy project,
but deployment was not considered in the &lt;a class="reference external" href="http://marselester.com/developing-django-project-with-saltstack.html"&gt;previous post&lt;/a&gt;. Let's find it out.&lt;/p&gt;
&lt;p&gt;Server configuration is different from local, thus environments will be needed
(at least production &lt;strong&gt;prod&lt;/strong&gt; and development &lt;strong&gt;dev&lt;/strong&gt;). Salt uses &lt;strong&gt;base&lt;/strong&gt;
environment by default.&lt;/p&gt;
&lt;p&gt;Environments are set in &lt;tt class="docutils literal"&gt;minion.conf&lt;/tt&gt; because masterless minion is used.
When no environment is set, Salt assumes following configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;file_roots&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pillar_roots&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/pillar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Salt will look for states in &lt;tt class="docutils literal"&gt;/srv/salt&lt;/tt&gt; and pillars in &lt;tt class="docutils literal"&gt;/srv/pillar&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Let's introduce &lt;strong&gt;dev&lt;/strong&gt; and &lt;strong&gt;prod&lt;/strong&gt; environments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;file_roots&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/salt/base&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dev&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/salt/dev&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/salt/base&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prod&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/salt/prod&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/salt/base&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pillar_roots&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/pillar/base&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dev&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/pillar/dev&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/pillar/base&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prod&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/pillar/prod&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/salt_roots/pillar/base&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each environment describes paths where to find files.
File is searched in the first directory and if it is not found it is
searched in the second one.&lt;/p&gt;
&lt;p&gt;States and pillars which were described in &lt;a class="reference external" href="http://marselester.com/developing-django-project-with-saltstack.html"&gt;previous post&lt;/a&gt; are splitted
to environment folders. Most of files are located in &lt;tt class="docutils literal"&gt;base&lt;/tt&gt; folder,
because they are the same to &lt;strong&gt;dev&lt;/strong&gt; and &lt;strong&gt;prod&lt;/strong&gt; environments.
You can find &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging-deploy"&gt;complete example&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;div class="section" id="what-production-environment-introduces"&gt;
&lt;h2&gt;What Production Environment Introduces&lt;/h2&gt;
&lt;p&gt;There is a difference between &lt;strong&gt;prod&lt;/strong&gt; and &lt;strong&gt;dev&lt;/strong&gt; project's source code
delivering. Development environment assumes that code is shared by Vagrant.
Production environment needs to get code from private git repository.
In order to do it user &lt;em&gt;jon_snow&lt;/em&gt; must have ssh keys. Here I don't use
private repository, but keys are still needed to log in to production server
by Fabric.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user.present&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow public key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh_auth&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://user/id_rsa.pub&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow secret key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/.ssh/id_rsa&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://user/id_rsa&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mode&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;600&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh_auth&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow public key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;prod/source_code.sls&lt;/tt&gt; fetches source code from GitHub.
I have tried to use built in &lt;tt class="docutils literal"&gt;git.latest&lt;/tt&gt; Salt state but it requires
to configure git name and email on server. I solved this issue by using
git hard reset.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg.installed&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.com&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh_known_hosts&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;fingerprint&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;messaging repository clone&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cmd&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;unless&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test -d /home/jon_snow/messaging_repository&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="no"&gt;git clone https://github.com/marselester/abstract-internal-messaging.git /home/jon_snow/messaging_repository&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh_known_hosts&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.com&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;messaging latest source code&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cmd&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cwd&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/messaging_repository&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="no"&gt;git fetch origin &amp;amp;&amp;amp;&lt;/span&gt;
              &lt;span class="no"&gt;git reset --hard origin/master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cmd&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;messaging repository clone&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;symlink&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_src_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;target&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/messaging_repository&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;force&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fabric-as-deployment-runner"&gt;
&lt;h2&gt;Fabric as Deployment Runner&lt;/h2&gt;
&lt;p&gt;Last thing to do is to run deployment of particular Salt environment
&lt;strong&gt;salt_env&lt;/strong&gt; in particular host &lt;strong&gt;target&lt;/strong&gt;. Fabric is good at it.&lt;/p&gt;
&lt;p&gt;I want Fabric to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;bootstrap Salt on given &lt;strong&gt;target&lt;/strong&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;upload &lt;tt class="docutils literal"&gt;minion.conf&lt;/tt&gt; to given &lt;strong&gt;target&lt;/strong&gt; to &lt;tt class="docutils literal"&gt;/etc/salt/minion&lt;/tt&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;upload Salt configs to given &lt;strong&gt;target&lt;/strong&gt; how it is described
in &lt;tt class="docutils literal"&gt;minion.conf&lt;/tt&gt; (to &lt;tt class="docutils literal"&gt;/srv/salt_roots&lt;/tt&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;invoke &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-call&lt;/span&gt;&lt;/tt&gt; on given &lt;strong&gt;target&lt;/strong&gt; with particular &lt;strong&gt;salt_env&lt;/strong&gt;
(here is &lt;tt class="docutils literal"&gt;prod&lt;/tt&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; salt-call state.highstate &lt;span class="nv"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prod
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's try to deploy &lt;strong&gt;prod&lt;/strong&gt; environment to VM. I assume that you have
&lt;tt class="docutils literal"&gt;messaging&lt;/tt&gt; directory (see &lt;a class="reference external" href="http://marselester.com/developing-django-project-with-saltstack.html"&gt;Developing Django project with SaltStack&lt;/a&gt;).
You need to clone &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging-deploy"&gt;Deploy Abstract Internal Messaging System&lt;/a&gt; in it
and start VM.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; messaging
&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/marselester/abstract-internal-messaging-deploy.git
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; abstract-internal-messaging-deploy/vagrant
&lt;span class="gp"&gt;$&lt;/span&gt; vagrant up
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to interact with VM you should add &lt;tt class="docutils literal"&gt;11.22.33.44 &lt;span class="pre"&gt;messaging-part-2&lt;/span&gt;&lt;/tt&gt;
to &lt;tt class="docutils literal"&gt;/etc/hosts&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Install Fabric and set up Salt masterless minion in VM.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; messaging/abstract-internal-messaging-deploy
&lt;span class="gp"&gt;$&lt;/span&gt; pip install -r requirements.txt
&lt;span class="gp"&gt;$&lt;/span&gt; fab target:local setup_masterless_minion
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally deploy &lt;strong&gt;prod&lt;/strong&gt; environment in VM.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab target:local salt_env:prod deploy
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Besides convenient developing, we got ability to deploy arbitrary environments
to arbitrary targets. It gives us opportunity to test deployment itself.
You can improve this solution by adding ability to specify git branch
which will be deployed.&lt;/p&gt;
&lt;p&gt;As in &lt;a class="reference external" href="http://marselester.com/developing-django-project-with-saltstack.html"&gt;previous post&lt;/a&gt; project should work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl -i messaging-part-2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="vagrant"></category><category term="salt"></category><category term="saltstack"></category></entry><entry><title>Developing Django project with SaltStack</title><link href="http://marselester.com/developing-django-project-with-saltstack.html" rel="alternate"></link><published>2013-11-09T00:00:00+07:00</published><updated>2013-11-09T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2013-11-09:/developing-django-project-with-saltstack.html</id><summary type="html">&lt;p&gt;Let's use &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; as an example of Django project. I want it to
run in VirtualBox which is managed by Vagrant. Infrastructure management
is provided by SaltStack.&lt;/p&gt;
&lt;p&gt;I advise you to create separate folder for repositories (currently there
is only one) of project and clone &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; there.
Also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's use &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; as an example of Django project. I want it to
run in VirtualBox which is managed by Vagrant. Infrastructure management
is provided by SaltStack.&lt;/p&gt;
&lt;p&gt;I advise you to create separate folder for repositories (currently there
is only one) of project and clone &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; there.
Also I need a folder for Vagrant files and prefer to name it &lt;tt class="docutils literal"&gt;vagrant&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir messaging
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; messaging
&lt;span class="gp"&gt;$&lt;/span&gt; git clone https://github.com/marselester/abstract-internal-messaging.git
&lt;span class="gp"&gt;$&lt;/span&gt; mkdir abstract-internal-messaging/vagrant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make friends of Vagrant and SaltStack, I need to install
Salty Vagrant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; vagrant plugin install vagrant-salt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I want Vagrant to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;share source code folder &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;messaging/abstract-internal-messaging&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;share states and pillars of SaltStack
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;messaging/abstract-internal-messaging/vagrant/salt/roots&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;run minion masterless by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-call&lt;/span&gt; state.highstate&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;assign convenient host name, here it is &amp;quot;messaging-part-1&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;vagrant/Vagrantfile&lt;/tt&gt; config responses for these requirements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- mode: ruby -*-&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;precise64&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://files.vagrantup.com/precise64.box&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:virtualbox&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modifyvm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;messaging-part-1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modifyvm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--memory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;messaging-part-1&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:private_network&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.2.3.4&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synced_folder&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/vagrant/abstract-internal-messaging&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synced_folder&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt/roots&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/srv&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:salt&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minion_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt/minion.conf&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_highstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you could notice, I have not had the &lt;tt class="docutils literal"&gt;vagrant/salt&lt;/tt&gt; folder yet.
Let's create following directory structure (actually you can just
&lt;tt class="docutils literal"&gt;git checkout &lt;span class="pre"&gt;salted-vagrant&lt;/span&gt;&lt;/tt&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tree abstract-internal-messaging/vagrant
&lt;span class="go"&gt;abstract-internal-messaging/vagrant&lt;/span&gt;
&lt;span class="go"&gt;|-- Vagrantfile&lt;/span&gt;
&lt;span class="go"&gt;`-- salt&lt;/span&gt;
&lt;span class="go"&gt;    |-- minion.conf&lt;/span&gt;
&lt;span class="go"&gt;    `-- roots&lt;/span&gt;
&lt;span class="go"&gt;        |-- pillar&lt;/span&gt;
&lt;span class="go"&gt;        |   |-- top.sls&lt;/span&gt;
&lt;span class="go"&gt;        |   |-- postgresql.sls&lt;/span&gt;
&lt;span class="go"&gt;        |   `-- website.sls&lt;/span&gt;
&lt;span class="go"&gt;        `-- salt&lt;/span&gt;
&lt;span class="go"&gt;            |-- top.sls&lt;/span&gt;
&lt;span class="go"&gt;            |-- user.sls&lt;/span&gt;
&lt;span class="go"&gt;            |-- source_code.sls&lt;/span&gt;
&lt;span class="go"&gt;            |-- python.sls&lt;/span&gt;
&lt;span class="go"&gt;            |-- redis.sls&lt;/span&gt;
&lt;span class="go"&gt;            |-- postgresql&lt;/span&gt;
&lt;span class="go"&gt;            |   |-- init.sls&lt;/span&gt;
&lt;span class="go"&gt;            |   `-- pg_hba.conf&lt;/span&gt;
&lt;span class="go"&gt;            `-- website&lt;/span&gt;
&lt;span class="go"&gt;                |-- django.sls&lt;/span&gt;
&lt;span class="go"&gt;                |-- wsgiserver.sls&lt;/span&gt;
&lt;span class="go"&gt;                |-- webserver.sls&lt;/span&gt;
&lt;span class="go"&gt;                |-- local.py.template&lt;/span&gt;
&lt;span class="go"&gt;                |-- supervisord.conf&lt;/span&gt;
&lt;span class="go"&gt;                |-- gunicorn.conf.py&lt;/span&gt;
&lt;span class="go"&gt;                `-- nginx.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;minion.conf&lt;/tt&gt; contains only one string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;file_client&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It means &amp;quot;Don't look for master server when running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-call&lt;/span&gt;&lt;/tt&gt;&amp;quot;.
It will assume that the local system has all of the file and pillar resources.&lt;/p&gt;
&lt;p&gt;Rest of files I will consider separately.&lt;/p&gt;
&lt;div class="section" id="user-and-source-code-states"&gt;
&lt;h2&gt;User and Source Code states&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/user.sls&lt;/tt&gt; creates user &amp;quot;jon_snow&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user.present&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/source_code.sls&lt;/tt&gt; makes shared source code available in jon_snow's home
by creating symlink.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;messaging source code&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;symlink&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/abstract-internal-messaging&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;target&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/vagrant/abstract-internal-messaging&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;force&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hardcoded path can be replaced by &lt;tt class="docutils literal"&gt;{{ &lt;span class="pre"&gt;pillar['website_src_dir']&lt;/span&gt; }}&lt;/tt&gt;,
which will be introduced further.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-state"&gt;
&lt;h2&gt;Python state&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/python.sls&lt;/tt&gt; installs Python 2, pip and Virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python2&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;names&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python-dev&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python-pip&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python2&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;virtualenv&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redis-and-postgresql-states"&gt;
&lt;h2&gt;Redis and PostgreSQL states&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/redis.sls&lt;/tt&gt; installs Redis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis-server&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg.installed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/postgresql/init.sls&lt;/tt&gt; installs PostgreSQL 9.1, copies &lt;tt class="docutils literal"&gt;pg_hba.conf&lt;/tt&gt;,
starts &lt;tt class="docutils literal"&gt;postgresql&lt;/tt&gt; service, creates user and database based on pillar's
data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;names&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql-9.1&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python-dev&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;libpq-dev&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service.running&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;watch&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/postgresql/9.1/main/pg_hba.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/postgresql/9.1/main/pg_hba.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://postgresql/pg_hba.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mode&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;644&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql-database-setup&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres_user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;postgresql_user&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;postgresql_password&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;createdb&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres_database&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;present&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;postgresql_db&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;encoding&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;UTF8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc_ctype&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;en_US.UTF8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lc_collate&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;en_US.UTF8&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template0&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;owner&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;postgresql_user&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres_user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql-database-setup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pillar/postgresql.sls&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql_user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql_password&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ghost&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql_db&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/postgresql/pg_hba.conf&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This file controls: which hosts are allowed to connect, how clients&lt;/span&gt;
&lt;span class="c1"&gt;# are authenticated, which PostgreSQL user names they can use, which&lt;/span&gt;
&lt;span class="c1"&gt;# databases they can access. Records take one of these forms:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# local DATABASE        USER            METHOD  [OPTIONS]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local   jon_snow        jon_snow        md5&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;# Database administrative login by Unix domain socket&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local   all             postgres                                peer&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;# TYPE  DATABASE        USER            ADDRESS                 METHOD&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;# &amp;quot;local&amp;quot; is for Unix domain socket connections only&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;local   all             all                                     trust&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;# IPv4 local connections&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;host    all             all             127.0.0.1/32            md5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="website-s-django-state"&gt;
&lt;h2&gt;Website's Django state&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/website/django.sls&lt;/tt&gt; creates virtual environment and installs
project's dependencies there. It copies django settings, collects static
files and migrate db as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_venv_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;makedirs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;virtualenv&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;no_site_packages&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;distribute&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;requirements&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_requirements_path&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;no_chown&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;virtualenv&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_venv_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;django settings&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_settings_path&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://website/local.py.template&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jinja&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;django-admin collectstatic&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;module&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;django.collectstatic&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bin_env&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_venv_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;settings_module&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;messaging.settings.local&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pythonpath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_src_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;noinput&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;virtualenv&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_venv_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;django settings&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;django-admin migrate&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;module&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;run&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;django.syncdb&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bin_env&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_venv_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;settings_module&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;messaging.settings.local&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pythonpath&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_src_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;migrate&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;virtualenv&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_venv_dir&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;django settings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;State above actively uses pillar file &lt;tt class="docutils literal"&gt;pillar/website.sls&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_venv_dir&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/venv&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_venv_activate_path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/venv/bin/activate&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_src_dir&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/abstract-internal-messaging&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_requirements_path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/abstract-internal-messaging/requirements_tests.txt&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_settings_path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/abstract-internal-messaging/messaging/settings/local.py&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_static_dir&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/abstract-internal-messaging/collected_static/&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_gunicorn_bin_path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/venv/bin/gunicorn&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_gunicorn_conf_path&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/jon_snow/gunicorn.conf.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is &lt;tt class="docutils literal"&gt;salt/website/local.py.template&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.dev&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;


&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;django.db.backends.postgresql_psycopg2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ pillar[&amp;#39;postgresql_db&amp;#39;] }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ pillar[&amp;#39;postgresql_user&amp;#39;] }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ pillar[&amp;#39;postgresql_password&amp;#39;] }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some secret key&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="website-s-wsgi-server-state"&gt;
&lt;h2&gt;Website's WSGI Server state&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/website/wsgiserver.sls&lt;/tt&gt; provides supervisored gunicorn running.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;supervisord conf&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/supervisor/conf.d/website_gunicorn.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://website/supervisord.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jinja&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gunicorn conf&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;website_gunicorn_conf_path&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://website/gunicorn.conf.py&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jon_snow&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;supervisor&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;supervisored gunicorn&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;supervisord&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;running&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;website_gunicorn&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;update&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;restart&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;watch&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;supervisord conf&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gunicorn conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;supervisor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/website/gunicorn.conf.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding: utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;


&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1:5000&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/website/supervisord.conf&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;program&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;website_gunicorn&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;command = {{ pillar[&amp;#39;website_gunicorn_bin_path&amp;#39;] }} -c {{ pillar[&amp;#39;website_gunicorn_conf_path&amp;#39;] }} messaging.wsgi:application&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;directory = {{ pillar[&amp;#39;website_src_dir&amp;#39;] }}&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;user = vagrant&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;autostart = true&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;autorestart = true&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;redirect_stderr = True&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;stdout_logfile = /var/log/supervisor/website_gunicorn.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="website-s-web-server-state"&gt;
&lt;h2&gt;Website's Web Server state&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/website/webserver.sls&lt;/tt&gt; installs latest stable Nginx, copies config
file and runs service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkgrepo&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deb http://nginx.org/packages/ubuntu/ precise nginx&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;key_url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http://nginx.org/keys/nginx_signing.key&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;installed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkgrepo&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;running&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;watch&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nginx&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nginx/nginx.conf&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nginx/nginx.conf&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;managed&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://website/nginx.conf&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mode&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;644&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;jinja&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notable in &lt;tt class="docutils literal"&gt;salt/website/nginx.conf&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;sendfile off&lt;/tt&gt;. It fixes
&lt;a class="reference external" href="http://jeremyfelt.com/code/2013/01/08/clear-nginx-cache-in-vagrant/"&gt;trouble&lt;/a&gt;
when Nginx runs in a virtual machine environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;worker_processes 2;&lt;/span&gt;


&lt;span class="l l-Scalar l-Scalar-Plain"&gt;events {&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;worker_connections 1024;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;


&lt;span class="l l-Scalar l-Scalar-Plain"&gt;http {&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;include mime.types;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;default_type application/octet-stream;&lt;/span&gt;

    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sendfile off;&lt;/span&gt;

    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;keepalive_timeout 65;&lt;/span&gt;

    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;server {&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;listen 80;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;server_name messaging-part-1;&lt;/span&gt;

        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;location /static/ {&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;alias {{ pillar[&amp;#39;website_static_dir&amp;#39;] }};&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;

        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;location / {&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_pass http://localhost:5000;&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_redirect off;&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_set_header Host $host;&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;

        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;# Redirects server error pages to the static page /50x.html&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;error_page 500 502 503 504 /50x.html;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;location = /50x.html {&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;root html;&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="top-states"&gt;
&lt;h2&gt;Top states&lt;/h2&gt;
&lt;p&gt;There is only one thing to do — to add top files and this tree is over.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;salt/top.sls&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;user&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source_code&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;redis&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;website.django&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;website.wsgiserver&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;website.webserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pillar/top.sls&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgresql&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;website&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article was mostly about states examples.
It's time to test configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; abstract-internal-messaging/vagrant
&lt;span class="gp"&gt;$&lt;/span&gt; vagrant up
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to reach website you can add &lt;tt class="docutils literal"&gt;1.2.3.4 &lt;span class="pre"&gt;messaging-part-1&lt;/span&gt;&lt;/tt&gt; to
&lt;tt class="docutils literal"&gt;/etc/hosts&lt;/tt&gt;. Now it should work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; curl -i messaging-part-1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tests should be passed as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; vagrant ssh
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; /home/jon_snow/venv/bin/activate
&lt;span class="gp"&gt;(venv)$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /home/jon_snow/abstract-internal-messaging
&lt;span class="gp"&gt;(venv)$&lt;/span&gt; ./manage.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="vagrant"></category><category term="salt"></category><category term="saltstack"></category></entry><entry><title>Preparation to Python Interview</title><link href="http://marselester.com/preparation-to-python-interview.html" rel="alternate"></link><published>2012-11-02T00:00:00+07:00</published><updated>2012-11-02T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-11-02:/preparation-to-python-interview.html</id><summary type="html">&lt;p&gt;I decided to collect a little more information and experience during
preparation to Python developer interview. These are some information and
links which seemed important to me. Maybe it will be helpful.&lt;/p&gt;
&lt;div class="section" id="how-does-it-usually-go"&gt;
&lt;h2&gt;How does it usually go?&lt;/h2&gt;
&lt;div class="section" id="what-kind-of-projects-did-you-participate-in"&gt;
&lt;h3&gt;What kind of projects did you participate in?&lt;/h3&gt;
&lt;p&gt;What did you do at …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I decided to collect a little more information and experience during
preparation to Python developer interview. These are some information and
links which seemed important to me. Maybe it will be helpful.&lt;/p&gt;
&lt;div class="section" id="how-does-it-usually-go"&gt;
&lt;h2&gt;How does it usually go?&lt;/h2&gt;
&lt;div class="section" id="what-kind-of-projects-did-you-participate-in"&gt;
&lt;h3&gt;What kind of projects did you participate in?&lt;/h3&gt;
&lt;p&gt;What did you do at your previous job? It is expected that you will told
the essence in simple words.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tricky-question"&gt;
&lt;h3&gt;Tricky question&lt;/h3&gt;
&lt;p&gt;It is expected that you will search for solution of task independently.
Reasonings aloud are welcomed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-code"&gt;
&lt;h3&gt;Writing code&lt;/h3&gt;
&lt;p&gt;Interviewer is interested in critical analysis of code. For example,
efficiency of used data structures, algorithm's complexity evaluation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h3&gt;Design&lt;/h3&gt;
&lt;p&gt;In this step it is important to ask as much as possible about a task before
starting to look for solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provocative-question"&gt;
&lt;h3&gt;Provocative question&lt;/h3&gt;
&lt;p&gt;You have to stay in your lane.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="questions"&gt;
&lt;h2&gt;Questions&lt;/h2&gt;
&lt;div class="section" id="basic"&gt;
&lt;h3&gt;Basic&lt;/h3&gt;
&lt;p&gt;Probably interviewer starts with basic questions. Let us see example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;funcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I guess he examines knowledge about namespace. It will print &lt;tt class="docutils literal"&gt;4&lt;/tt&gt; five times.
To explain that you supposed to know about &lt;a class="reference external" href="http://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules"&gt;LEGB&lt;/a&gt; rule. Also you should know
that variable search in enclosed scope will be done later, &lt;strong&gt;after call&lt;/strong&gt; of
enclosed functions. They all get same value -- value of &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; in last
iteration.&lt;/p&gt;
&lt;p&gt;Next example prints numbers from 0 to 4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;funcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It happens because default value is stored &lt;strong&gt;when enclosed function was
created&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There is another popular question related with default value of function.
N.B. &lt;tt class="docutils literal"&gt;names&lt;/tt&gt; is mutable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pythontutor.com"&gt;Visualizing code execution&lt;/a&gt; and &lt;a class="reference external" href="https://alexbers.com/python_quiz/"&gt;quiz of non-trivial features of Python&lt;/a&gt;
will be helpful to prepare for questions which are mentioned above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-you-think-about-this-code"&gt;
&lt;h3&gt;What do you think about this code?&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;safe_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently interviewer expects these answers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it repeats functionality of &lt;tt class="docutils literal"&gt;d.get(0, 'blah')&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;it uses &lt;tt class="docutils literal"&gt;if key in d.keys()&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;if key in d&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;actually it is looking for &lt;tt class="docutils literal"&gt;key&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;[1, 2, 3]&lt;/tt&gt; (for Python 2).
Therefore O(n) is worse than O(1) for dictionary lookup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It would be appropriate to read about &lt;a class="reference external" href="http://habrahabr.ru/post/128457/"&gt;data structures&lt;/a&gt; and their
&lt;a class="reference external" href="http://wiki.python.org/moin/TimeComplexity"&gt;time complexity&lt;/a&gt;, about &lt;a class="reference external" href="http://docs.python.org/3/library/collections.html"&gt;collections&lt;/a&gt;, &lt;a class="reference external" href="http://docs.python.org/3/library/itertools"&gt;itertools&lt;/a&gt; and &lt;a class="reference external" href="http://wiki.python.org/moin/HowTo/Sorting/"&gt;sorting&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-knowledge"&gt;
&lt;h3&gt;Advanced knowledge&lt;/h3&gt;
&lt;p&gt;These articles are for complete picture of Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cafepy.com/article/python_types_and_objects/"&gt;Python Types and Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/6581949#6581949"&gt;What is a metaclass in Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cafepy.com/article/python_attributes_and_methods/"&gt;Python Attributes and Methods&lt;/a&gt;, &lt;a class="reference external" href="http://habrahabr.ru/post/137415/"&gt;Пользовательские атрибуты в Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="misc"&gt;
&lt;h3&gt;Misc&lt;/h3&gt;
&lt;p&gt;Questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pragmaticstartup.wordpress.com/2012/08/25/what-every-new-pythondjango-web-developer-should-know-in-3-months/"&gt;What Every New Python/Django Web Developer Should Know in 3 Months&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/d/topic/comp.lang.python/rhW_rIYY5HM/discussion"&gt;Python Interview Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.techinterviews.com/python-interview-questions-and-answers"&gt;Python interview questions and answers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://habrahabr.ru/qa/5783/"&gt;Что спрашивают на собеседовании в Яндекс?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pyobject.ru/blog/2010/02/04/python-quiz/"&gt;Вопросы и задания по Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Useful articles:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://programmers.stackexchange.com/questions/43409/dealing-with-engineers-that-frequently-leave-their-jobs"&gt;Dealing with engineers that frequently leave their jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://steve-yegge.blogspot.ch/2008/03/get-that-job-at-google.html"&gt;Get that job at Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/101268/hidden-features-of-python"&gt;Hidden features of Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="interview"></category></entry><entry><title>Django TODO: тестирование во время конструирования</title><link href="http://marselester.com/django-todo-testing-during-construction.html" rel="alternate"></link><published>2012-06-29T13:00:00+07:00</published><updated>2012-06-29T13:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-29:/django-todo-testing-during-construction.html</id><summary type="html">&lt;p&gt;Тестирование, выполняемое разработчиками -- один из важнейших элементов полной
стратегии тестирования.&lt;/p&gt;
&lt;p&gt;Тестирование может указать только на отдельные дефектные области программы --
оно не сделает программу удобнее в использовании, более быстрой, компактной,
удобочитаемой или расширяемой.&lt;/p&gt;
&lt;p&gt;Цель тестирования противоположна целям других этапов разработки. Его целью
является нахождение ошибок. Успешным считается тест, нарушающий работу ПО …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Тестирование, выполняемое разработчиками -- один из важнейших элементов полной
стратегии тестирования.&lt;/p&gt;
&lt;p&gt;Тестирование может указать только на отдельные дефектные области программы --
оно не сделает программу удобнее в использовании, более быстрой, компактной,
удобочитаемой или расширяемой.&lt;/p&gt;
&lt;p&gt;Цель тестирования противоположна целям других этапов разработки. Его целью
является нахождение ошибок. Успешным считается тест, нарушающий работу ПО. Все
остальные этапы разработки направлены на предотвращение ошибок и недопущение
нарушения работы программы &lt;a class="footnote-reference" href="#mcconnell" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Виды тестирования&lt;/h2&gt;
&lt;p&gt;Виды тестирования, выполняемые разработчиком: блочное тестирование,
интеграционное тестирование.&lt;/p&gt;
&lt;p&gt;Блочным тестированием называют тестирование полного класса, метода или
небольшого приложения, выполняемое отдельно от прочих частей системы. Данный
тип тестирования позволяет структурировать код.&lt;/p&gt;
&lt;p&gt;Интеграционное тестирование -- это совместное выполнение двух или более
классов, пакетов, компонентов или подсистем. Этот вид тестирования начинают
вводить, как только созданы два класса, которые можно протестировать. Такое
тестирование позволяет определить регрессию, но является медленным и менее
информативным, чем блочное тестирование.&lt;/p&gt;
&lt;p&gt;Тестирование разделяют на две обширные категории: &amp;quot;тестирование методом
черного ящика&amp;quot; и &amp;quot;тестирование методом белого (прозрачного) ящика&amp;quot;. В первом
случае тестирощик не владеет сведениями о внутренней работе тестируемого
элемента. При тестировании методом белого ящика внутренняя реализация
тестируемого элемента тестировщику известна. Тестируя собственный код,
программист использует именно этот вид тестирования.&lt;/p&gt;
&lt;p&gt;Тестирование требует, чтобы программист рассчитывал найти ошибки в своем коде
&lt;a class="footnote-reference" href="#mcconnell" id="id3"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django"&gt;
&lt;h2&gt;Рекомендации по тестированию Django приложений&lt;/h2&gt;
&lt;p&gt;Карл Майер дал следующие рекомендации по тестированию Django приложений
&lt;a class="footnote-reference" href="#meyer" id="id4"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;для представлений следует писать интеграционные тесты;&lt;/li&gt;
&lt;li&gt;для тестирования Ajax и других JavaScript взаимодействий нужно использовать
&lt;em&gt;Selenium&lt;/em&gt;, который позволяет автоматизировать тестирование веб-приложений в
браузере;&lt;/li&gt;
&lt;li&gt;для всех остальных случаев необходимо использовать блочное тестирование.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Он также выступил против использования &lt;em&gt;fixtures&lt;/em&gt; (набор данных, которые
Django использует для импорта в БД), аргументируя тем, что они медленно
загружаются, их трудно поддерживать и обновлять. Также применение &lt;em&gt;fixtures&lt;/em&gt;
приводит к росту взаимозависимости тестов. Для замены &lt;em&gt;fixtures&lt;/em&gt; был
разработан инструмент &lt;em&gt;factory_boy&lt;/em&gt;, который имеет следующие преимущества:
близость тестовых данных к тестовому коду, не требует от тестирования введение
избыточных данных, прост в обслуживании.&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Что именно тестировать?&lt;/h3&gt;
&lt;p&gt;Ответ на вопрос &lt;em&gt;&amp;quot;Что именно тестировать в Django приложении?&amp;quot;&lt;/em&gt; дал Дэниэл
Линдсли &lt;a class="footnote-reference" href="#lindsley" id="id6"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;не следует тестировать стандартные функции Python и Django;&lt;/li&gt;
&lt;li&gt;если модель данных содержит пользовательские методы, их необходимо
тестировать;&lt;/li&gt;
&lt;li&gt;нужно тестировать пользовательские формы, шаблонные теги, контекстные
процессоры, команды управления;&lt;/li&gt;
&lt;li&gt;следует тестировать бизнес логику в представлениях.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;Тестирование моделей данных&lt;/h2&gt;
&lt;p&gt;Для тестирования Django моделей используют блочное тестирование. В качестве
инструмента блочного тестирования автор выбрал библиотеку &lt;em&gt;unittest&lt;/em&gt;, так как
она входит в стандартную библиотеку Python. Тесты, написанные на &lt;em&gt;unittest&lt;/em&gt;
работают быстрее при тестировании Django приложений &lt;a class="footnote-reference" href="#lindsley" id="id8"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В качестве примера проектирования тестов приводятся методы
&lt;em&gt;days_quantity_after_deadline&lt;/em&gt; (определяет количество просроченных дней
задачи) и &lt;em&gt;start_date&lt;/em&gt; (определяет дату начала работы над задачей).&lt;/p&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;Количество просроченных дней задачи&lt;/h3&gt;
&lt;p&gt;Определение количества просроченных дней задачи. Для этого рассмотрим все
возможные случаи наступления дедлайна:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;просрочен дедлайн у ожидающей задачи из-за предыдущей задачи. Предыдущая
задача превысила свой дедлайн и дедлайн текущей задачи;&lt;/li&gt;
&lt;li&gt;работающая задача превысила дедлайн;&lt;/li&gt;
&lt;li&gt;задача выполнена с превышением дедлайна;&lt;/li&gt;
&lt;li&gt;просрочен дедлайн у остановленной задачи. Владелец цепочки не решил проблему
остановки задачи.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Из вышеперечисленных случаев следует два правила расчета количества
просроченных дней:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;если статус &lt;strong&gt;DONE&lt;/strong&gt; и дата окончания задачи больше или равна дедлайну, то
количество дней равно разности даты окончания и дедлайна, плюс один день
(день дедлайна);&lt;/li&gt;
&lt;li&gt;если статус &lt;strong&gt;WAIT/WORK/STOP&lt;/strong&gt; и текущая дата больше или равна дедлайну, то
количество дней равно разности текущей даты и дедлайна, плюс один день (день
дедлайна).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Определив все возможные случаи наступления дедлайна можно спроектировать
&amp;quot;чистые тесты&amp;quot; для метода &lt;em&gt;days_quantity_after_deadline&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeadlineDaysTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskTest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Тестирует определение количества просроченных дней.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_wait_overdue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Просрочен дедлайн у ожидающей задачи из-за предыдущей задачи.&lt;/span&gt;

&lt;span class="sd"&gt;        Предыдущая задача превысила свой дедлайн и дедлайн текущей задачи.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_work_overdue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Работающая задача превысила дедлайн.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_done_overdue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Задача выполнена с превышением дедлайна.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_stop_overdue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Просрочен дедлайн у остановленной задачи.&lt;/span&gt;

&lt;span class="sd"&gt;        Владелец цепочки не решил проблему остановки задачи.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Под &amp;quot;чистыми тестами&amp;quot; подразумеваются тесты, которые проверяют работает ли
код, а не пытаются нарушить его работу всевозможными способами (&amp;quot;грязные
тесты&amp;quot;). В организациях со зрелым процессом тестирования на каждый &amp;quot;чистый
тест&amp;quot; обычно приходятся пять &amp;quot;грязных&amp;quot; &lt;a class="footnote-reference" href="#mcconnell" id="id10"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;Дата начала работы над задачей&lt;/h3&gt;
&lt;p&gt;Рассмотрим проектирование тестов для более сложного метода -- метода, который
определяет дату начала работы над задачей.&lt;/p&gt;
&lt;p&gt;Чтобы определить дату начала работы над задачей необходимо рассмотреть все
возможные комбинации предшествующих задач по статусам.&lt;/p&gt;
&lt;div class="section" id="wait"&gt;
&lt;h4&gt;Статус текущей задачи WAIT&lt;/h4&gt;
&lt;p&gt;Задача стоит первой в цепочке, дата начала работы над цепочкой не наступила.
В этом случае дата начала работы над задачей равна дате начала цепочки.&lt;/p&gt;
&lt;p&gt;Предыдущая задача имеет статус &lt;em&gt;WAIT&lt;/em&gt;, к тому же:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;дата начала предыдущей задачи&lt;/em&gt; не наступила. В данном случае дата начала
текущей задачи равна дедлайну предыдущей задачи;&lt;/li&gt;
&lt;li&gt;наступила &lt;em&gt;дата начала предыдущей задачи&lt;/em&gt;, но еще не наступил &lt;em&gt;дедлайн
предыдущей задачи&lt;/em&gt;. В данном случае дата начала текущей задачи равна
дедлайну предыдущей задачи;&lt;/li&gt;
&lt;li&gt;наступил &lt;em&gt;дедлайн предыдущей задачи&lt;/em&gt;. В данном случае дата начала текущей
задачи не прогнозируема.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Предыдущая задача имеет статус &lt;em&gt;WORK&lt;/em&gt; или &lt;em&gt;STOP&lt;/em&gt;, к тому же:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;не наступил &lt;em&gt;дедлайн предыдущей задачи&lt;/em&gt;. В данном случае дата начала текущей
задачи равна дедлайну предыдущей задачи;&lt;/li&gt;
&lt;li&gt;наступил &lt;em&gt;дедлайн предыдущей задачи&lt;/em&gt;. В данном случае дата начала текущей
задачи не прогнозируема.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="work-done-stop"&gt;
&lt;h4&gt;Статус текущей задачи WORK или DONE или STOP&lt;/h4&gt;
&lt;p&gt;Задача стоит первой в цепочке, наступила дата начала работы над цепочкой.
В данном случае дата начала работы над задачей равна дате начала цепочки.&lt;/p&gt;
&lt;p&gt;Предыдущая задача имеет статус &lt;em&gt;DONE&lt;/em&gt;. В данном случае дата начала задачи
равна дедлайну предыдущей задачи.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;Правило определения даты&lt;/h4&gt;
&lt;p&gt;Проанализировав вышеперечисленные случаи автор сформулировал правила
определения даты начала работы над задачей:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;для первой задачи равна дате начала работы над цепочкой;&lt;/li&gt;
&lt;li&gt;для статуса &lt;em&gt;WAIT&lt;/em&gt; равна дедлайну предыдущей задачи. Если дедлайн просрочен,
дата начала задачи не прогнозируема;&lt;/li&gt;
&lt;li&gt;для статусов &lt;em&gt;WORK&lt;/em&gt;, &lt;em&gt;DONE&lt;/em&gt;, &lt;em&gt;STOP&lt;/em&gt; равна дате окончания предыдущей задачи.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Демонстрация фрагмента блочного тестирования для метода &lt;em&gt;start_date&lt;/em&gt; приведена
ниже:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;todo.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;factories&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaskTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;factories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_fixtures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# Сотрудники.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alexander&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;designer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kazimir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;programmer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ada&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StartDateTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskTest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Тестирует определение даты начала работы над задачей.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_first_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Тестирует дату начала работы первой задачи.&lt;/span&gt;

&lt;span class="sd"&gt;        Дата начала первой задачи совпадает с датой начала цепочки. Это условие&lt;/span&gt;
&lt;span class="sd"&gt;        верно для задач с любым статусом.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;chain_start_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Chain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chain_start_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain_start_date&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;first_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;designer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Design&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="n"&gt;deadline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;deadline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;Заключение&lt;/h3&gt;
&lt;p&gt;Организация библиотеки &lt;em&gt;unittest&lt;/em&gt; по классам и методам подходит в случае, когда
есть потребность в написании тестов, которые используют одинаковый код. Такой
подход упрощает абстракцию общих задач в общие методы. Библиотека также
поддерживает явные процедуры настройки и очистки, которые предоставляют
высокий уровень контроля над средой, в которой происходит выполнение тестов.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2&gt;Тестирование представлений&lt;/h2&gt;
&lt;p&gt;Для тестирования Django представлений рекомендуется &lt;a class="footnote-reference" href="#korobov" id="id15"&gt;[4]&lt;/a&gt; использовать
библиотеку &lt;em&gt;WebTest&lt;/em&gt;. Ближайшим аналогом &lt;em&gt;WebTest&lt;/em&gt; является &lt;em&gt;twill&lt;/em&gt;, но он не
поддерживает юникод и давно не развивается (последний релиз был в 2007 году).&lt;/p&gt;
&lt;p&gt;В качестве примера приводится тестирование посещения пользователем страницы
актуальных задач:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_webtest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebTest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;factories&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ActualTasksTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebTest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;factories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_fixtures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_user_not_logined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo_actual_tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_designer_logined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo_actual_tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kazimir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Казимир Малевич&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;В первом случае пользователь не авторизован (метод &lt;em&gt;test_user_not_logined&lt;/em&gt;) и
браузер должен вернуть статус &lt;em&gt;302&lt;/em&gt; (перенаправление на страницу авторизации),
во втором случае (метод &lt;em&gt;test_designer_logined&lt;/em&gt;) пользователь авторизован под
именем &lt;em&gt;Казимир Малевич&lt;/em&gt;. Данные тесты не такие полезные, как блочные тесты.
Но даже если они просто проверят основные страницы системы на отсутствие
сообщений об исключении, то они уже принесут большую пользу разработчику.&lt;/p&gt;
&lt;p&gt;Представления имеют много связей и зависимостей (шаблоны, база данных,
конфигурация URL), поэтому их трудно тестировать. Карл Майер рекомендует
писать как можно меньше кода на уровне представлений &lt;a class="footnote-reference" href="#meyer" id="id16"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="mcconnell" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id3"&gt;2&lt;/a&gt;, &lt;a class="fn-backref" href="#id10"&gt;3&lt;/a&gt;)&lt;/em&gt; Макконелл С. Совершенный код. Мастер-класс /
Пер. с англ. – М. : Издательство &amp;quot;Русская редакция&amp;quot;, 2012. – 896 стр. : ил.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="meyer" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id4"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id16"&gt;2&lt;/a&gt;)&lt;/em&gt; Meyer C. &lt;a class="reference external" href="http://carljm.github.com/django-testing-slides/"&gt;Testing and Django&lt;/a&gt; at PyCon US 2012.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="lindsley" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id6"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id8"&gt;2&lt;/a&gt;)&lt;/em&gt; Линдсли Д. &lt;a class="reference external" href="http://toastdriven.com/blog/2011/apr/10/guide-to-testing-in-django/"&gt;Guide to Testing in Django&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="korobov" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id15"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Коробов М. &lt;a class="reference external" href="http://habrahabr.ru/post/91471/"&gt;Пишем функциональные/интеграционные тесты для
проекта на Django&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="django-todo"></category><category term="testing"></category></entry><entry><title>Django TODO: конструирование системы</title><link href="http://marselester.com/django-todo-system-construction.html" rel="alternate"></link><published>2012-06-29T12:00:00+07:00</published><updated>2012-06-29T12:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-29:/django-todo-system-construction.html</id><summary type="html">&lt;p&gt;При работе над проектом конструирование включает другие процессы, в том числе
проектирование. Формальная архитектура дает ответы только на вопросы
системного уровня, при этом значительная часть проектирования может быть
намеренно оставлена на этап конструирования. Проектирование -- это
&amp;quot;постепенный&amp;quot; процесс. Проекты приложений не возникают в умах разработчиков
сразу в готовом виде. Они развиваются …&lt;/p&gt;</summary><content type="html">&lt;p&gt;При работе над проектом конструирование включает другие процессы, в том числе
проектирование. Формальная архитектура дает ответы только на вопросы
системного уровня, при этом значительная часть проектирования может быть
намеренно оставлена на этап конструирования. Проектирование -- это
&amp;quot;постепенный&amp;quot; процесс. Проекты приложений не возникают в умах разработчиков
сразу в готовом виде. Они развиваются и улучшаются в ходе обзоров,
неформальных обсуждений, написания кода и выполнения его ревизий.&lt;/p&gt;
&lt;p&gt;Практически во всех случаях проект несколько меняется во время первоначальной
разработки системы и еще больше -- при ее модернизации.&lt;/p&gt;
&lt;p&gt;Управление сложностью -- самый важный технический аспект разработки ПО.
Управлять сложностью гораздо легче, если при проектировании стремиться к
простоте. Есть два общих способа достижения простоты: минимизация объема
существенной сложности, с которой приходится иметь дело в любой конкретный
момент времени, и подавление необязательного роста несущественной сложности.&lt;/p&gt;
&lt;p&gt;Одной из самых полезных концепций проектирования является сокрытие информации.
Оно полезно на всех уровнях проектирования: от применения именованных констант
вместо литералов до создания типов данных и проектирования классов, методов и
подсистем &lt;a class="footnote-reference" href="#mcconnell" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Для снижения сложности Стив Макконелл определил ряд рекомендаций
&lt;a class="footnote-reference" href="#mcconnell" id="id2"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;тщательно определяйте интерфейсы классов, чтобы можно было игнорировать
внутреннее устройство классов;&lt;/li&gt;
&lt;li&gt;поддерживайте абстракцию, формируемую интерфейсом класса, чтобы не
запоминать ненужных деталей;&lt;/li&gt;
&lt;li&gt;избегайте глобальных данных, потому что их использование значительно
увеличивает процент кода, который нужно удерживать в уме в любой момент
времени;&lt;/li&gt;
&lt;li&gt;избегайте глубоких иерархий наследования, потому что они предъявляют высокие
требования к интеллекту;&lt;/li&gt;
&lt;li&gt;избегайте глубокой вложенности циклов и условных операторов, поскольку их
можно заменить на более простые управляющие структуры, позволяющие бережнее
расходовать умственные ресурсы;&lt;/li&gt;
&lt;li&gt;тщательно определите подход к обработке ошибок, вместо того, чтобы
использовать произвольную комбинацию произвольных методик;&lt;/li&gt;
&lt;li&gt;не позволяйте классам достигать размеров целых программ;&lt;/li&gt;
&lt;li&gt;поддерживайте методы короткими;&lt;/li&gt;
&lt;li&gt;используйте ясные, очевидные имена переменных;&lt;/li&gt;
&lt;li&gt;минимизируйте число параметров, передаваемых в метод, или, что еще важнее,
передавайте только те параметры, которые нужны для поддержания абстракции,
формируемой интерфейсом метода;&lt;/li&gt;
&lt;li&gt;используйте соглашения, чтобы не запоминать произвольные, несущественные
различия между разными фрагментами кода;&lt;/li&gt;
&lt;li&gt;создавая для сложного теста булеву функцию и абстрагирую суть теста
упрощается код.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При конструировании системы &lt;a class="reference external" href="https://github.com/marselester/django-todo"&gt;Django TODO&lt;/a&gt; я старался придерживаться вышеперечисленных рекомендаций.&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;Модель данных&lt;/h2&gt;
&lt;p&gt;Уровень доступа к данным вынесен в отдельную часть приложения, называемый
моделью. Модели размещаются в файле &lt;tt class="docutils literal"&gt;models.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Модель в Django представляет собой описание данных в базе, представленное на
языке Python. В Django модель используется, чтобы выполнить SQL-запрос и
вернуть удобные структуры данных Python. Кроме того, модели позволяют
представить высокоуровневые концепции, для которых в SQL может не быть
аналогов.&lt;/p&gt;
&lt;p&gt;Описание моделей на Python лучше по ряду причин:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;сокращается количество мысленных &amp;quot;переключений контекста&amp;quot;. Когда приходится
писать код на SQL, потом на Python, а потом снова на SQL, продуктивность
падает;&lt;/li&gt;
&lt;li&gt;размещение моделей данных в коде упрощает их хранение в системе управления
версиями;&lt;/li&gt;
&lt;li&gt;удобные средства миграции моделей (например, South).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Каждая модель соответствует одной таблице БД, а каждый атрибут модели
соответствует одному столбцу таблицы. Из этого правила есть исключение,
касающееся отношения многие-ко-многим &lt;a class="footnote-reference" href="#holovaty" id="id5"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Соглашения по оформлению кода&lt;/h3&gt;
&lt;p&gt;При конструировании моделей приняты следующие соглашения по оформлению кода.
Последовательность размещения атрибутов класса-модели &lt;a class="footnote-reference" href="#django" id="id7"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;названия полей;&lt;/li&gt;
&lt;li&gt;атрибуты менеджера модели;&lt;/li&gt;
&lt;li&gt;класс &lt;tt class="docutils literal"&gt;Meta&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;метод &lt;tt class="docutils literal"&gt;__unicode__&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;метод &lt;tt class="docutils literal"&gt;__str__&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;метод &lt;tt class="docutils literal"&gt;save&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;метод &lt;tt class="docutils literal"&gt;get_absolute_url&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;остальные методы.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Вышеперечисленные группы атрибутов должны быть отделены друг от друга пустой
строкой.&lt;/p&gt;
&lt;p&gt;Если в модели есть поле выбора (&lt;em&gt;choices&lt;/em&gt;), оно должно быть оформлено в виде
кортежа из кортежей, заглавными буквами. Должны быть расположены в начале
модели &lt;a class="footnote-reference" href="#django" id="id8"&gt;[3]&lt;/a&gt; и названы без использования &amp;quot;магических чисел&amp;quot;
&lt;a class="footnote-reference" href="#mcconnell" id="id9"&gt;[1]&lt;/a&gt;. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;UNCERTAIN_STATUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;DONE_STATUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;STOP_STATUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;WAIT_STATUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;WORK_STATUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DONE_STATUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STOP_STATUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stop&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UNCERTAIN_STATUS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;Методы модели&lt;/h3&gt;
&lt;p&gt;Разработчик может определить в модели свои собственные методы и тем самым
наделять свои объекты дополнительной функциональностью на уровне строк. Методы
модели подходят для инкапсуляции всей бизнес-логики в одном месте. Например,
фрагмент модели &lt;em&gt;Цепочка&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Цепочка задач.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Пропущены атрибуты модели для экономии места.&lt;/span&gt;

    &lt;span class="c1"&gt;# Default manager.&lt;/span&gt;
    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PassThroughManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_queryset_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ChainQuerySet&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;actual_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Определяет фактический статус цепочки.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WAIT_STATUS&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STOP_STATUS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STOP_STATUS&lt;/span&gt;
        &lt;span class="n"&gt;last_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;last_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;actual_status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DONE_STATUS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DONE_STATUS&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WORK_STATUS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Согласно спроектированной архитектуре системы были разработаны следующие
методы модели данных &lt;em&gt;Задача&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;be_in_time&lt;/em&gt; определяет, успевает ли задача к дедлайну;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;actual_status&lt;/em&gt; определяет фактический статус задачи, основываясь на таких
данных, как «статический» статус задачи (DONE, STOP), статус предыдущей
задачи, порядковый номер задачи и текущая дата;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;start_date&lt;/em&gt; определяет дату начала работы над задачей, если это возможно;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;days_to_start&lt;/em&gt; определяет количество дней, оставшихся до начала работы над
задачей;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;remaining_days&lt;/em&gt; определяет количество полных дней, оставшихся до дедлайна.
Например, задача ограничена сроком &lt;tt class="docutils literal"&gt;[26; 29)&lt;/tt&gt; и сейчас &lt;em&gt;27 число&lt;/em&gt;. До
дедлайна остался один полный день &lt;em&gt;(28 число)&lt;/em&gt;, так как текущий день не
учитывается;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;days_quantity_after_deadline&lt;/em&gt; определяет количество дней, на которые
просрочена задача;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;expended_days&lt;/em&gt; определяет количество дней, затраченных на задачу;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;duration&lt;/em&gt; определяет количество дней, выделенных на выполнение задачи.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для модели &lt;em&gt;Цепочка&lt;/em&gt; были реализованы методы:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;actual_status&lt;/em&gt; определяет фактический статус цепочки, основываясь на таких
данных, как дата начала работы над цепочкой, статус текущей задачи цепочки;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;deadline&lt;/em&gt; определяет дедлайн цепочки. Дедлайн цепочки равен дедлайну
последней задачи в цепочке;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;finish_date&lt;/em&gt; определяет дату завершения цепочки. Дата завершения цепочки
равна дате завершения последней задачи в цепочке;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;be_in_time&lt;/em&gt; определяет, успевает ли цепочка задач к дедлайну;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;days_to_start&lt;/em&gt; определяет количество дней, оставшихся до начала работы
цепочки;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;remaining_days&lt;/em&gt; определяет количество дней, оставшихся до дедлайна цепочки.
Совпадает с количеством дней, оставшихся до дедлайна последней задачи в
цепочке;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;days_quantity_after_deadline&lt;/em&gt; определяет количество дней, на которые
просрочена цепочка;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;expended_days&lt;/em&gt; определяет количество дней, затраченных на цепочку;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;last_task&lt;/em&gt; возвращает последнюю задачу из цепочки.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;Менеджер модели&lt;/h3&gt;
&lt;p&gt;Менеджер модели -- это объект, с помощью которого Django выполняет запросы к
БД. Каждая модель Django имеет по меньшей мере один менеджер, и разработчик
может создавать свои менеджеры для организации специализированных видов
доступа.&lt;/p&gt;
&lt;p&gt;Потребность создания собственного менеджера может быть вызвана двумя
причинами: необходимостью добавить менеджеру дополнительные методы или
необходимостью модифицировать исходный объект QuerySet, возвращаемый
менеджером &lt;a class="footnote-reference" href="#holovaty" id="id12"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Встроенный в Django менеджер моделей не позволяет строить цепочки методов,
таких как &lt;tt class="docutils literal"&gt;actual_tasks = &lt;span class="pre"&gt;Task.objects.by_worker(user).actual()&lt;/span&gt;&lt;/tt&gt;. Для обхода
этого ограничения используется сторонняя библиотека &lt;em&gt;django-model-utils&lt;/em&gt;,
которая позволяет писать QuerySet вместо менеджера &lt;a class="footnote-reference" href="#korobov" id="id13"&gt;[4]&lt;/a&gt;. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.query&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QuerySet&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChainQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;by_owner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Возвращает цепочки владельца.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Возвращает актуальтуные цепочки задач.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;Миграция схемы модели&lt;/h3&gt;
&lt;p&gt;Во время разработки Django приложений наступает момент, когда необходимо
изменить схему модели данных, например, добавить новое поле. Если разработка
ведется в группе, то проблема усугубляется тем, что необходимо
синхронизировать модель. Эту проблему призвана решить библиотека South. Ее
основными задачами является обеспечение простого, стабильного и независимого
от БД слоя миграции, чтобы избавить разработчика от проблем изменения схемы.&lt;/p&gt;
&lt;p&gt;Рассмотрим типовые примеры начала работы с South &lt;a class="footnote-reference" href="#south" id="id15"&gt;[5]&lt;/a&gt;. Случай, когда в
базе данных нет таблиц и нет файлов миграций -- состояние проекта сразу после
выполнения команда &lt;tt class="docutils literal"&gt;manage.py startapp myapp&lt;/tt&gt;. Далее, вместо команды
&lt;tt class="docutils literal"&gt;manage.py syncdb&lt;/tt&gt; нужно создать начальную миграцию командой &lt;tt class="docutils literal"&gt;manage.py
schemamigration myapp &lt;span class="pre"&gt;--initial&lt;/span&gt;&lt;/tt&gt; и применить миграцию командой
&lt;tt class="docutils literal"&gt;manage.py migrate myapp&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Следующий вариант, когда таблицы уже созданы, но нет файлов миграций. В данной
ситуации необходимо выполнить команду &lt;tt class="docutils literal"&gt;manage.py convert_to_south myapp&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Возможна ситуация, когда таблицы уже созданы, но миграции еще не применены.
Тогда необходимо выполнить &lt;tt class="docutils literal"&gt;manage.py migrate myapp 0001 &lt;span class="pre"&gt;--fake&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2&gt;Шаблон&lt;/h2&gt;
&lt;p&gt;Шаблон -- это текстовый документ или строка Python, который размечен с
применением языка шаблонов Django. Шаблон может содержать шаблонные теги и
шаблонные переменные.&lt;/p&gt;
&lt;p&gt;При выборе места хранения шаблонов в многоразовых Django приложениях
рекомендуется &lt;a class="footnote-reference" href="#lincolnloop" id="id17"&gt;[6]&lt;/a&gt; использовать следующий путь:
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;корень-репозитория/название_приложения/templates/название_приложения/&lt;/span&gt;
название_шаблона&lt;/tt&gt;. Например, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-todo/todo/templates/todo/base.html&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Название шаблонов следует выбирать придерживаясь следующей конвенции
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[model]_[function].html&lt;/span&gt;&lt;/tt&gt;, например, &lt;tt class="docutils literal"&gt;task_list.html&lt;/tt&gt;. Отнюдь не каждое
название шаблона, полученное в соответствии с конвенцией, получается
подходящим. В таких случаях следует выбирать название по своему усмотрению.&lt;/p&gt;
&lt;p&gt;Шаблонный тег -- это некоторое обозначение в шаблоне, с которым ассоциирована
программная логика. Например, шаблонный тег может порождать содержимое,
выступать в роли управляющей конструкции, получать содержимое из базы данных
или разрешать доступ к другим шаблонным тегам.&lt;/p&gt;
&lt;p&gt;Шаблоны пользовательских тегов и частичные шаблоны рекомендуется хранить в
директории &lt;tt class="docutils literal"&gt;includes&lt;/tt&gt;. Например, отображение информации о цепочке задач
вынесено в шаблон &lt;tt class="docutils literal"&gt;includes/chain.html&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Пользовательские теги шаблона рекомендуется хранить в каталоге:
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;корень-репозитория/название_приложения/templatetags/&lt;/span&gt;
[название_приложения]_tags.py&lt;/tt&gt;. Например, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-todo/todo/templatetags/&lt;/span&gt;
todo_tags.py&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;Представления и конфигурирование URL&lt;/h2&gt;
&lt;p&gt;Представление -- функция на языке Python, которая принимает экземпляр класса
&lt;em&gt;HttpRequest&lt;/em&gt; в качестве первого параметра и возвращает экземпляр класса
&lt;em&gt;HttpResponse&lt;/em&gt;. Ниже приведен код функции вместе с командами импорта из файла
&lt;tt class="docutils literal"&gt;views.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;todo.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;


&lt;span class="nd"&gt;@login_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;actual_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Отображает список актуальных задач для исполнителя.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="n"&gt;actual_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;todo/task_list.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;place&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;actual_tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;actual_tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Чтобы связать функцию представления с URL, в Django используется механизм
конфигурации URL. Django ожидает найти переменную &lt;em&gt;urlpatterns&lt;/em&gt; в конфигурации
URL. Она определяет соответствие между URL-адресами и обрабатывающим их кодом.&lt;/p&gt;
&lt;p&gt;Вот как подключается представление &lt;em&gt;actual_tasks&lt;/em&gt; и &lt;em&gt;task_archive&lt;/em&gt; в файле
&lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.defaults&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo.views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;actual_tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo_actual_tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^task/archive/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;task_archive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo_task_archive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Любой запрос к URL &lt;tt class="docutils literal"&gt;/task/archive/&lt;/tt&gt; должен обрабатываться функцией
&lt;em&gt;task_archive&lt;/em&gt;, а запрос &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; будет обрабатываться &lt;em&gt;actual_tasks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Названия шаблонам URL рекомендуется давать в форме &lt;tt class="docutils literal"&gt;APP_MODEL_VIEW&lt;/tt&gt;,
например, &lt;tt class="docutils literal"&gt;blog_post_detail&lt;/tt&gt; или &lt;tt class="docutils literal"&gt;blog_post_list&lt;/tt&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="mcconnell" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id2"&gt;2&lt;/a&gt;, &lt;a class="fn-backref" href="#id9"&gt;3&lt;/a&gt;)&lt;/em&gt; Макконелл С. Совершенный код. Мастер-класс /
Пер. с англ. – М. : Издательство &amp;quot;Русская редакция&amp;quot;, 2012. – 896 стр. : ил.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="holovaty" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id5"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id12"&gt;2&lt;/a&gt;)&lt;/em&gt; Головатый А., Каплан-Мосс Дж. Django. Подробное руководство,
2-е издание. – Пер. с англ. – СПб.: Символ-Плюс, 2010. – 560 с., ил.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="django" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id7"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id8"&gt;2&lt;/a&gt;)&lt;/em&gt; Django community. &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"&gt;Django Coding Style&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="korobov" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id13"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Коробов М. &lt;a class="reference external" href="http://habrahabr.ru/post/142703/"&gt;Рецепты от ПанГурмана&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="south" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id15"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Godwin A. &lt;a class="reference external" href="http://south.readthedocs.org/en/latest/tutorial/index.html"&gt;South documentation&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="lincolnloop" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id17"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Lincoln Loop company. &lt;a class="reference external" href="http://lincolnloop.com/django-best-practices/"&gt;Django Best Practices&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="django-todo"></category><category term="construction"></category></entry><entry><title>Django TODO: проектирование архитектуры системы</title><link href="http://marselester.com/django-todo-design-architecture.html" rel="alternate"></link><published>2012-06-29T11:00:00+07:00</published><updated>2012-06-29T11:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-29:/django-todo-design-architecture.html</id><summary type="html">&lt;p&gt;Следующим этапом разработки системы является проектирование архитектуры.&lt;/p&gt;
&lt;p&gt;Архитектура должна быть продуманным концептуальным целым. Главный тезис самой
популярной книги по разработке ПО &amp;quot;Мифический человеко-месяц&amp;quot; гласит, что
основной проблемой, характерной для крупных систем, является поддержание их
концептуальной целостности. Хорошая архитектура должна соответствовать
проблеме &lt;a class="footnote-reference" href="#mcconnell" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Разделение системы на подсистемы на уровне архитектуры, позволяет …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Следующим этапом разработки системы является проектирование архитектуры.&lt;/p&gt;
&lt;p&gt;Архитектура должна быть продуманным концептуальным целым. Главный тезис самой
популярной книги по разработке ПО &amp;quot;Мифический человеко-месяц&amp;quot; гласит, что
основной проблемой, характерной для крупных систем, является поддержание их
концептуальной целостности. Хорошая архитектура должна соответствовать
проблеме &lt;a class="footnote-reference" href="#mcconnell" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Разделение системы на подсистемы на уровне архитектуры, позволяет
концентрироваться в каждый конкретный момент времени на меньшей части системы.&lt;/p&gt;
&lt;p&gt;Обобщенная схема работы системы приведена на рисунке.&lt;/p&gt;
&lt;img alt="" src="http://dl.dropbox.com/u/15875449/django_todo_block_schema.png" /&gt;
&lt;p&gt;Работа пользователя с системой начинается с авторизации. После успешной
аутентификации пользователь попадает на страницу с задачами, поставленными ему
другими пользователями. Далее он может перейти в раздел проектов, либо в
раздел &amp;quot;сотрудники&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Модель данных&lt;/h2&gt;
&lt;p&gt;Уровень доступа к данным. На этому уровне сосредоточена вся информация о
данных: как получить к ним доступ, как осуществлять контроль, каково их
поведение, каковы отношения между данными.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Модель &amp;quot;Задача&amp;quot;&lt;/h3&gt;
&lt;p&gt;Модель данных &lt;em&gt;Задача&lt;/em&gt; содержит следующие атрибуты:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;задача&lt;/em&gt; -- описание сути задачи. Текстовое поле, обязательное для
заполнения;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;исполнитель&lt;/em&gt; -- идентификатор сотрудника. Целочисленное поле, обязательное
для заполнения;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;статус&lt;/em&gt; -- целочисленное поле, обязательное для заполнения. Может принимать
значения: UNCERTAIN (не определен), DONE (завершен), STOP (прерван), WAIT
(в ожидании), WORK (в работе). Статусы WAIT и WORK вычисляются при выборке
из базы данных на основе даты начала и статуса предыдущей задачи. Задача
может быть завершена (DONE) или прервана (STOP) только из статуса WORK.
Статус STOP нужен в случае, когда дальнейшее выполнение работы над задачей
невозможно. Сигнализирует, что необходимо вмешательство руководителя
проекта. Только руководитель может отредактировать прерванную задачу
(например, изменить дедлайн задачи) и вновь запустить ее на выполнение
(сменить статус на WORK). Статус задачи WAIT может быть в случае:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;если она первая в цепочке и дата начала работы над цепочкой не наступила;&lt;/li&gt;
&lt;li&gt;если статус предыдущей задачи не DONE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Статус задачи WORK может быть в случае:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;если она первая в цепочке и наступила дата начала работы над цепочкой;&lt;/li&gt;
&lt;li&gt;если статус предыдущей задачи DONE.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;дедлайн&lt;/em&gt; -- крайняя дата завершения работы над задачей. Дедлайн задачи
должен быть больше, чем дедлайн предыдущей задачи;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;дата завершения&lt;/em&gt; -- дата завершения работы над задачей. Поле заполняется по
завершению работы над задачей. Может не совпадать с дедлайном;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;цепочка&lt;/em&gt; -- идентификатор цепи, к которой относится задача. Поле
обязательно для заполнения;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;порядковый номер&lt;/em&gt; -- целочисленное поле, больше или равно единице,
обязательное для заполнения. Поле введено для сортировки задач в цепочке и
простого способа получения предыдущей задачи;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;em&gt;архив&lt;/em&gt; -- флаг, по которому определяется актуальность задачи для ее
исполнителя.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Модель данных &lt;em&gt;Задача&lt;/em&gt; содержит вычисляемые атрибуты:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;дата начала&lt;/em&gt; -- определяет дату начала работы над задачей. Для первой
задачи равна дате начала работы над цепочкой. Для задачи со статусом WAIT
равна дедлайну предыдущей задачи. Если дедлайн нарушен, дата начала задачи
не прогнозируема. Для остальных статусов равна дате окончания предыдущей
задачи;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;срок до начала работы&lt;/em&gt; -- определяет количество дней, оставшихся до начала
работы над задачей (статус WAIT);&lt;/li&gt;
&lt;li&gt;&lt;em&gt;срок до дедлайна&lt;/em&gt; -- определяет количество дней, оставшихся до дедлайна
задачи;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;просроченные дни&lt;/em&gt; -- определяет количество дней, на которые просрочена
задача;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;фактический срок&lt;/em&gt; -- определяет количество дней, затраченных на задачу.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Модель &amp;quot;Цепочка&amp;quot;&lt;/h3&gt;
&lt;p&gt;Модель данных &lt;em&gt;Цепочка&lt;/em&gt; содержит следующие атрибуты:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;название&lt;/em&gt; -- текстовое поле, обязательное для заполнения;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;владелец&lt;/em&gt; -- идентификатор сотрудника. Целочисленное поле, обязательное для
заполнения;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;дата начала&lt;/em&gt; -- дата начала работы над цепочкой задач. Поле обязательно для
заполнения;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;приоритет&lt;/em&gt; -- приоритет цепочки (срочно, не срочно);&lt;/li&gt;
&lt;li&gt;&lt;em&gt;архив&lt;/em&gt; -- флаг, по которому определяется актуальность цепочки для ее
владельца;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Модель данных &lt;em&gt;Цепочка&lt;/em&gt; содержит вычисляемые атрибуты:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;статус&lt;/em&gt; -- статус цепочки совпадает со статусом текущей задачи цепочки;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;дедлайн&lt;/em&gt; -- дедлайн цепочки совпадает с дедлайном последней задачи;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;срок до дедлайна&lt;/em&gt; -- определяет количество полных дней, оставшихся до
дедлайна последней задачи;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;просроченные дни&lt;/em&gt; -- определяет количество дней, на которые просрочена
последняя задача;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;фактический срок&lt;/em&gt; -- определяет количество дней, затраченных на цепочку.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Модель данных &lt;em&gt;Сотрудник&lt;/em&gt; содержит текстовые атрибуты &lt;em&gt;ФИО&lt;/em&gt; и &lt;em&gt;должность&lt;/em&gt;,
обязательные для заполнения.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="mcconnell" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Макконелл С. Совершенный код. Мастер-класс /
Пер. с англ. – М. : Издательство &amp;quot;Русская редакция&amp;quot;, 2012. – 896 стр. : ил.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="django-todo"></category><category term="architecture"></category></entry><entry><title>Django TODO: выработка требований к системе</title><link href="http://marselester.com/django-todo-development-of-system-requirements.html" rel="alternate"></link><published>2012-06-29T11:00:00+07:00</published><updated>2012-06-29T11:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-29:/django-todo-development-of-system-requirements.html</id><summary type="html">&lt;p&gt;После прочтения Макконелла захотелось спроецировать его советы на Django.
Для этого я взял за основу разработку системы &lt;a class="reference external" href="https://github.com/marselester/django-todo"&gt;Django TODO&lt;/a&gt;. Итак, первый этап -- выработка требований к
системе.&lt;/p&gt;
&lt;p&gt;Требования подробно описывают, что должна делать система. Внимание к
требованиям помогает свести к минимуму изменения системы после начала
разработки. Явные требования помогают гарантировать, что …&lt;/p&gt;</summary><content type="html">&lt;p&gt;После прочтения Макконелла захотелось спроецировать его советы на Django.
Для этого я взял за основу разработку системы &lt;a class="reference external" href="https://github.com/marselester/django-todo"&gt;Django TODO&lt;/a&gt;. Итак, первый этап -- выработка требований к
системе.&lt;/p&gt;
&lt;p&gt;Требования подробно описывают, что должна делать система. Внимание к
требованиям помогает свести к минимуму изменения системы после начала
разработки. Явные требования помогают гарантировать, что функциональность
системы определяется пользователем, а не программистом. Если явных требований
нет, программисту обычно самому приходится вырабатывать их во время
программирования &lt;a class="footnote-reference" href="#mcconnell" id="id2"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;В данном случае приложение должно предоставлять простой механизм создания
цепочек задач, мониторинг статуса их выполнения, а также должно отображать
актуальные задачи для исполнителя.&lt;/p&gt;
&lt;p&gt;Для каждой задачи цепочки устанавливается дедлайн, который должен быть больше,
чем дедлайн предыдущей задачи. Под дедлайном подразумевается дата в формате
&lt;em&gt;дд.мм.гггг&lt;/em&gt;, до которой задача должна быть завершена.&lt;/p&gt;
&lt;p&gt;В списке задач отображаются актуальные задачи, в которых пользователь
фигурирует как исполнитель. Пользователь сам отправляет задачи в архив, тем
самым он решает, какие задачи для него актуальны.&lt;/p&gt;
&lt;p&gt;Отображение дополнительной информации о сроке задачи зависит от ее статуса.
Пример возможных вариантов для статуса &lt;em&gt;WAIT&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;задача начнет работать через десять дней;&lt;/li&gt;
&lt;li&gt;дата начала работы не прогнозируема, так как предыдущая задача превысила
свой дедлайн и использует рабочие дни текущей задачи;&lt;/li&gt;
&lt;li&gt;дедлайн просрочен на один день, так как предыдущая задача превысила свой
дедлайн и дедлайн текущей задачи.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Пример возможных вариантов для статусов &lt;em&gt;WORK&lt;/em&gt; и &lt;em&gt;STOP&lt;/em&gt;: до дедлайна осталось
два дня, дедлайн просрочен на один день. Пример возможных вариантов для
статуса &lt;em&gt;DONE&lt;/em&gt;: выполнено в срок за пять дней, дедлайн просрочен на один день.&lt;/p&gt;
&lt;p&gt;В списке цепочек задач необходимо отображать актуальные цепочки пользователя,
отсортированные по дедлайну (сверху старые, внизу новые). Актуальность цепочки
определяет ее владелец. Каждая цепочка задач должна содержать:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;название;&lt;/li&gt;
&lt;li&gt;дедлайн;&lt;/li&gt;
&lt;li&gt;информацию об исполнителе задачи, ее статусе, выделенный и фактический срок
исполнения;&lt;/li&gt;
&lt;li&gt;информацию о сроке цепочки, которая зависит от статуса цепочки.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="mcconnell" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Макконелл С. Совершенный код. Мастер-класс /
Пер. с англ. – М. : Издательство &amp;quot;Русская редакция&amp;quot;, 2012. – 896 стр. : ил.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="python"></category><category term="django"></category><category term="django-todo"></category><category term="requirements"></category></entry><entry><title>Соглашения по разработке на Python/Django</title><link href="http://marselester.com/links-to-best-practices-of-python-django.html" rel="alternate"></link><published>2012-06-29T00:00:00+07:00</published><updated>2012-06-29T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-29:/links-to-best-practices-of-python-django.html</id><summary type="html">&lt;p&gt;Во время разработки я часто сверяюсь с известными мне соглашениями,
стараюсь следовать рекомендациям. Цитировать их не имеет смысла -- лучше
приведу ссылки.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 -- Style Guide for Python Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#long-lines-continuations"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;.
В нем я нашел ответы на вопросы форматирования длинных строк:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
expended_time = (self.finish_date() - self.start_date
                 + datetime …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Во время разработки я часто сверяюсь с известными мне соглашениями,
стараюсь следовать рекомендациям. Цитировать их не имеет смысла -- лучше
приведу ссылки.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 -- Style Guide for Python Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#long-lines-continuations"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;.
В нем я нашел ответы на вопросы форматирования длинных строк:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
expended_time = (self.finish_date() - self.start_date
                 + datetime.timedelta(days=1))
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html"&gt;Google Python Style Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"&gt;Coding style&lt;/a&gt; из документации Django.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://lincolnloop.com/django-best-practices/"&gt;Django Best Practices&lt;/a&gt; от
компании Lincoln Loop.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python-guide.org/en/latest/index.html"&gt;The Hitchhiker’s Guide to Python!&lt;/a&gt; от Kenneth Reitz.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://guide.python-distribute.org/"&gt;The Hitchhiker’s Guide to Packaging&lt;/a&gt;
от Tarek Ziadé.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.s7labs.com/learn/ewa/"&gt;Elements of Web Architecture&lt;/a&gt; от s7labs.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://twitter.com/getpy"&gt;Твиты&lt;/a&gt; с ссылками на интересные статьи по Python
от &lt;a class="reference external" href="https://twitter.com/czheng"&gt;&amp;#64;czheng&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Рекомендации по именованию от Макконелла&lt;/h2&gt;
&lt;p&gt;Читать как мантру.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Именование переменных&lt;/h3&gt;
&lt;p&gt;Имя должно полно и точно описывать сущность. Формулирование сути переменной в
словах.&lt;/p&gt;
&lt;p&gt;Имя чаще всего описывает проблему реального мира, а не ее решение на языке
программирования.&lt;/p&gt;
&lt;p&gt;Значимая часть имени переменной располагаться в начале и читается первой.
Спецификаторы вычисляемых значений находятся в конце:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
revenue_total
expense_average
&lt;/pre&gt;
&lt;p&gt;Не используйте &amp;quot;Number&amp;quot; из-за двойного смысла (количество и номер). Лучше:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
customer_count
customer_index
&lt;/pre&gt;
&lt;p&gt;Именование булевых переменных в утвердительной форме:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
done
success или ok
found
error
&lt;/pre&gt;
&lt;p&gt;Имена должны легко читаться.&lt;/p&gt;
&lt;p&gt;Избегайте имен, имеющих:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;похожие значения: &lt;tt class="docutils literal"&gt;file_number, file_index&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;похожие звучания: &lt;tt class="docutils literal"&gt;wrap, rap&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;похожие имена: плохо -- &lt;tt class="docutils literal"&gt;client_recs, client_reps&lt;/tt&gt;, хорошо --
&lt;tt class="docutils literal"&gt;client_records, clients_reports&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;цифры: &lt;tt class="docutils literal"&gt;file1, file2&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Не используйте &amp;quot;магические числа&amp;quot;, заменяйте их абстрактными сущностями:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CYCLES_NEEDED = 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Именование функций&lt;/h3&gt;
&lt;p&gt;Если функция возвращает значение, в имени должно быть указано описание
возвращаемого значения.&lt;/p&gt;
&lt;p&gt;Глагол &lt;em&gt;get&lt;/em&gt; здесь излишен:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cos()

pen.current_color()
user.last_id()
&lt;/pre&gt;
&lt;p&gt;Для именования процедуры используйте &lt;strong&gt;глагол + объект&lt;/strong&gt;, над которым
выполняется действие:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print_document()
repaginate_document()

document.print()
order_info.check()
monthly_revenue.calc()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="best practices"></category></entry><entry><title>Разделение настроек в Django</title><link href="http://marselester.com/splitting-settings-in-django.html" rel="alternate"></link><published>2012-06-29T00:00:00+07:00</published><updated>2012-06-29T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-29:/splitting-settings-in-django.html</id><summary type="html">&lt;p&gt;В &lt;a class="reference external" href="https://code.djangoproject.com/wiki/SplitSettings"&gt;Django wiki&lt;/a&gt; собраны
различные способы разделения настроек. Мне нравится &lt;a class="reference external" href="http://senko.net/en/django-quickstart-skeleton-project/"&gt;вариант&lt;/a&gt;, описанный в блоге
Senko Rašić:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
settings/
├── __init__.py
├── base.py
├── development.py
├── local.py
└── production.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;base.py&lt;/tt&gt; содержит общие настройки для &lt;tt class="docutils literal"&gt;development.py&lt;/tt&gt; и
&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt;, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MANAGERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADMINS&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Yekaterinburg&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt; содержит настройки для …&lt;/p&gt;</summary><content type="html">&lt;p&gt;В &lt;a class="reference external" href="https://code.djangoproject.com/wiki/SplitSettings"&gt;Django wiki&lt;/a&gt; собраны
различные способы разделения настроек. Мне нравится &lt;a class="reference external" href="http://senko.net/en/django-quickstart-skeleton-project/"&gt;вариант&lt;/a&gt;, описанный в блоге
Senko Rašić:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
settings/
├── __init__.py
├── base.py
├── development.py
├── local.py
└── production.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;base.py&lt;/tt&gt; содержит общие настройки для &lt;tt class="docutils literal"&gt;development.py&lt;/tt&gt; и
&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt;, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MANAGERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADMINS&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Yekaterinburg&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt; содержит настройки для эксплуатации. Как минимум, необходимо
выключить режим отладки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;development.py&lt;/tt&gt; содержит настройки, необходимые для разработки. Настройки
должны быть &lt;strong&gt;одинаковы&lt;/strong&gt; и &lt;strong&gt;полезны для всех участников&lt;/strong&gt; процесса
разработки, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Все индивидуальные настройки разработчика необходимо вынести в &lt;tt class="docutils literal"&gt;local.py&lt;/tt&gt;.
Например, это могут быть настройки подключения к БД, любимые инструменты
разработки и так далее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.development&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;developer&amp;#39;s db name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;developer&amp;#39;s db user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;developer&amp;#39;s db password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На production сервере &lt;tt class="docutils literal"&gt;local.py&lt;/tt&gt; обычно содержит настройки подключения к
БД:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.production&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;local.py&lt;/tt&gt; не должен отслеживаться VCS.&lt;/p&gt;
&lt;p&gt;Для Django 1.4 в файлах &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;repo-name/project_name/wsgi.py&lt;/span&gt;&lt;/tt&gt; и
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;repo-name/manage.py&lt;/span&gt;&lt;/tt&gt; нужно указать путь до &lt;tt class="docutils literal"&gt;local.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;project_name.settings.local&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;У меня не получилось разместить &lt;tt class="docutils literal"&gt;local.py&lt;/tt&gt; на &lt;a class="reference external" href="http://www.heroku.com/"&gt;heroku&lt;/a&gt;, чтобы файл не находился под контролем git (плохо
искал?). Самое простое решение -- избавиться от &lt;tt class="docutils literal"&gt;local.py&lt;/tt&gt;, в &lt;tt class="docutils literal"&gt;manage.py&lt;/tt&gt;
указать &lt;tt class="docutils literal"&gt;project_name.settings.development&lt;/tt&gt;, а в &lt;tt class="docutils literal"&gt;wsgi.py&lt;/tt&gt; --
&lt;tt class="docutils literal"&gt;project_name.settings.production&lt;/tt&gt;. Еще можно использовать
&lt;tt class="docutils literal"&gt;heroku config&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ heroku config:add SECRET_KEY=my_unique_secret_key
&lt;/pre&gt;
</content><category term="python"></category><category term="django"></category><category term="settings"></category></entry><entry><title>Краткий обзор инфраструктуры для разработки reusable Django приложений</title><link href="http://marselester.com/short-overview-of-infrastructure-for-developing-reusable-django-apps.html" rel="alternate"></link><published>2012-06-13T00:00:00+07:00</published><updated>2012-06-13T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2012-06-13:/short-overview-of-infrastructure-for-developing-reusable-django-apps.html</id><summary type="html">&lt;p&gt;Начиная впервые разрабатывать веб-приложения на новом фреймворке программист
зачастую сталкивается с некоторыми трудностями. При разработке отчуждаемых
веб-приложений на Django к этим проблемам необходимо отнести организацию
файлов в проекте, обнаружение тестов, вопросы пакетирования приложений и
организации автоматизированного тестирования. В данной статье приведены пути
решения этих проблем.&lt;/p&gt;
&lt;p&gt;Важно знать различия между двумя …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Начиная впервые разрабатывать веб-приложения на новом фреймворке программист
зачастую сталкивается с некоторыми трудностями. При разработке отчуждаемых
веб-приложений на Django к этим проблемам необходимо отнести организацию
файлов в проекте, обнаружение тестов, вопросы пакетирования приложений и
организации автоматизированного тестирования. В данной статье приведены пути
решения этих проблем.&lt;/p&gt;
&lt;p&gt;Важно знать различия между двумя способами разработки Django приложений.
Первый способ заключается в создании приложения внутри каталога проекта с
помощью команды &lt;tt class="docutils literal"&gt;manage.py startapp&lt;/tt&gt;. Второй способ – разработка
независимого приложения. Автономное приложение проще использовать и
распространять &lt;a class="footnote-reference" href="#bennett" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Системы пакетирования&lt;/h2&gt;
&lt;p&gt;Для того чтобы Django смог найти изолированное приложение, нужно чтобы оно
находилось в Python пути. Python путь – это список каталогов, в которых Python
ищет модули, всякий раз исполняя оператор &lt;tt class="docutils literal"&gt;import&lt;/tt&gt;. При установке
интерпретатора Python создается директория &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/tt&gt; и добавляется в
Python путь. Все сторонние приложения устанавливаются в &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Python имеет систему пакетов, которая позволяет распространять программы и
библиотеки в стандартном формате, что помогает легко устанавливать и
использовать их. Помимо распространения пакетов Python также обеспечивает
централизованный сервис для контрибуции пакетов. Этот сервис называется Индекс
Python Пакетов (PyPI). Он позволяет разработчикам распространять пакет
большому сообществу с небольшими затратами усилий. Использование пакетов дает
такие преимущества, как:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;управление зависимостями пакетов;&lt;/li&gt;
&lt;li&gt;получение информации об установленных пакетах (например, версия пакета);&lt;/li&gt;
&lt;li&gt;удаление пакетов;&lt;/li&gt;
&lt;li&gt;поиск пакетов по PyPI &lt;a class="footnote-reference" href="#ziade" id="id3"&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Текущее состояние систем пакетирования показано на рисунке. Если
разрабатываемому пакету необходим модуль &lt;em&gt;Setuptools&lt;/em&gt;, рекомендуется
установить &lt;em&gt;Distribute&lt;/em&gt;, который является обновленной версией оригинального
&lt;em&gt;Setuptools&lt;/em&gt;. &lt;em&gt;Distribute&lt;/em&gt; был создан так как &lt;em&gt;Setuptools&lt;/em&gt; больше не
поддерживается разработчиками. Модуль &lt;em&gt;distutils&lt;/em&gt; является частью стандартной
библиотеки Python и обеспечивает основу для пакетирования. В будущем
&lt;em&gt;distutils2&lt;/em&gt; заменит &lt;em&gt;Setuptools&lt;/em&gt; и &lt;em&gt;distutils&lt;/em&gt;, а также устранит
необходимость в &lt;em&gt;Distribute&lt;/em&gt;. До завершения работ над &lt;em&gt;distutils2&lt;/em&gt;
разработчикам рекомендуют использовать &lt;em&gt;distutils&lt;/em&gt; &lt;a class="footnote-reference" href="#ziade" id="id4"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://ziade.org/2012/11/17/chronology-of-packaging/"&gt;&lt;img alt="" src="http://blog.ziade.org/history-part1.png" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://ziade.org/2012/11/17/chronology-of-packaging/"&gt;&lt;img alt="" src="http://blog.ziade.org/history-part2.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;Управление экосистемой пакетирования&lt;/h2&gt;
&lt;p&gt;Для манипулирования экосистемой пакетирования были разработаны такие
инструменты, как Pip и Virtualenv. Pip – это инструмент для установки и
управления Python пакетами. С его помощью можно:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;устанавливать пакеты, например, &lt;tt class="docutils literal"&gt;pip install Django&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;показывать список установленных пакетов и их версии, например,
&lt;tt class="docutils literal"&gt;pip freeze&lt;/tt&gt; отобразит &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Django==1.3.1,&lt;/span&gt; &lt;span class="pre"&gt;pep8==0.6.1,&lt;/span&gt;
&lt;span class="pre"&gt;virtualenv==1.7.1.2&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;устанавливать пакеты определенных версий, например,
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;'Mark-down&amp;gt;2.0,&amp;lt;2.0.3'&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;обновлять пакеты, например, &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; Django&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;удалять пакеты, например, &lt;tt class="docutils literal"&gt;pip uninstall Markdown&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для того чтобы не смешивать экспериментальные пакеты со стабильными пакетами,
разработчики используют Virtualenv. Данный инструмент позволяет создавать
изолированные Python окружения и устанавливать в них пакеты, не модифицируя
системное окружение Python. Например, &lt;tt class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;--no-site-packages&lt;/span&gt; my_env&lt;/tt&gt;
создаст окружение &lt;tt class="docutils literal"&gt;my_env&lt;/tt&gt; без пакетов, &lt;tt class="docutils literal"&gt;source my_env/bin/activate&lt;/tt&gt;
активирует окружение &lt;tt class="docutils literal"&gt;my_env&lt;/tt&gt;, а &lt;tt class="docutils literal"&gt;deactivate&lt;/tt&gt; отключит его.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;Метаданные проекта&lt;/h2&gt;
&lt;p&gt;Наименьший проект на Python состоит из двух файлов. Файл &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, который
содержит метаданные о проекте и файл, который содержит Python код для
реализации функциональности проекта. В &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; есть только три поля,
необходимые для заполнения: &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;version&lt;/em&gt; и &lt;em&gt;packages&lt;/em&gt;. Поле &lt;em&gt;name&lt;/em&gt; должно
быть уникальным для публикации в PyPI. Поле &lt;em&gt;version&lt;/em&gt; следит за различными
версиями проекта. Поле &lt;em&gt;packages&lt;/em&gt; описывает, где размещен Python код проекта
&lt;a class="footnote-reference" href="#ziade" id="id7"&gt;[2]&lt;/a&gt;. Ниже приведен пример файла &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, который также включает
информацию о лицензии и описание проекта:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django-todo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.1dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;README.rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;licence&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT license&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;todo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;todo.templatetags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;Структура репозитория&lt;/h2&gt;
&lt;p&gt;Для удобства разработки в Django существует стандарт организации проекта и
стиль кодирования &lt;a class="footnote-reference" href="#django" id="id9"&gt;[3]&lt;/a&gt;. При разработке приложений автор в большей
степени опирается на них, а также на практический опыт компании Lincoln Loop
&lt;a class="footnote-reference" href="#lincolnloop" id="id10"&gt;[4]&lt;/a&gt;. Руководство по стилю кодирования и автоматизация имеет важное
значение для цикла разработки. Структура репозитория в той же степени является
важной частью архитектуры проекта. Рассмотрим некоторые особенности:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt; должен содержать описание проекта в формате reST;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LICENSE&lt;/tt&gt; должен содержать полный текст лицензии;&lt;/li&gt;
&lt;li&gt;аргумент &lt;em&gt;install_requires&lt;/em&gt; в &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; нужен для перечисления
зависимостей проекта;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;MANIFEST.in&lt;/tt&gt; – это шаблон, который определяет, какие файлы должны быть
включены в пакет, например, &lt;tt class="docutils literal"&gt;include README.rst&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;в &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; следует указывать зависимости, необходимые для
участия в разработке проекта (тестирование, генерация документации)
&lt;a class="footnote-reference" href="#reitz" id="id11"&gt;[5]&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;todo/__init__.py&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;todo/models.py&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;docs/conf.py&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;docs/index.rst&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/__init__.py&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/models.py&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;Обнаружение и запуск тестов&lt;/h2&gt;
&lt;p&gt;Тесты не следует распространять вместе с модулем, так как это приводит к
увеличению сложности для конечных пользователей – наборы тестов требуют
дополнительных зависимостей. На конференции &lt;em&gt;PyCon US 2012&lt;/em&gt; Карл Майер
предложил решение &lt;a class="footnote-reference" href="#meyer" id="id13"&gt;[6]&lt;/a&gt;, которое позволило отделить тесты от приложений в
проекте и реализовать обнаружение и запуск всех тестов из каталога &lt;tt class="docutils literal"&gt;tests&lt;/tt&gt;.
Автор применил данное решение для организации тестов в многоразовых Django
приложениях &lt;a class="footnote-reference" href="#app-skeleton" id="id14"&gt;[7]&lt;/a&gt;. В корне репозитория располагается скрипт
&lt;tt class="docutils literal"&gt;runtests.py&lt;/tt&gt;, который запускает тесты:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tests.settings&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_runner&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runtests&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;TestRunner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;test_runner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;failfast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;failures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_runner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_tests&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;failures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;runtests&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Настройки для их запуска указаны в файле &lt;tt class="docutils literal"&gt;tests/settings.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;app_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;TEST_DISCOVERY_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TEST_RUNNER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tests.runner.DiscoveryDjangoTestSuiteRunner&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;FIXTURE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEST_DISCOVERY_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fixtures&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Обнаружение тестов осуществляется во всех файлах, которые находятся в каталоге
&lt;tt class="docutils literal"&gt;tests&lt;/tt&gt; и название которых совпадает с &lt;em&gt;models.py&lt;/em&gt;, &lt;em&gt;tests.py&lt;/em&gt; или
&lt;em&gt;test*.py&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2&gt;Автоматизация тестирования&lt;/h2&gt;
&lt;p&gt;Для автоматизации тестирования Python проектов автор использует инструмент
tox. Он может быть использован:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;для проверки, что пакеты устанавливаются правильно в разных версиях Python;&lt;/li&gt;
&lt;li&gt;для запуска тестов в каждой из сред;&lt;/li&gt;
&lt;li&gt;в качестве интерфейса для сервера непрерывной интеграции, например, Jenkins.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ниже приведен пример конфигурации &lt;tt class="docutils literal"&gt;tox.ini&lt;/tt&gt; со средами &lt;em&gt;Python 2.6&lt;/em&gt;,
&lt;em&gt;Python 2.7&lt;/em&gt; и &lt;em&gt;Django 1.3&lt;/em&gt; &lt;a class="footnote-reference" href="#django-todo" id="id16"&gt;[8]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[tox]
envlist=py26,py27,dj13

[testenv]
deps=
    django==1.4.0
    git+https://github.com/rbarrois/factory_boy.git
    webtest
    django-webtest

commands=python runtests.py

[testenv:dj13]
deps=
    django==1.3.1
    git+https://github.com/rbarrois/factory_boy.git
    webtest
    django-webtest
&lt;/pre&gt;
&lt;p&gt;Окружение &lt;em&gt;testenv&lt;/em&gt; является средой по умолчанию. В ней описаны пакеты с
указаниями версий, которые необходимы для тестирования проекта (в данном
случае это фреймворк Django версии 1.4.1, последние версии инструментов для
тестирования – factory_boy, webtest, django-webtest).&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="bennett" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Bennett B. Practical Django Projects.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="ziade" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id3"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id4"&gt;2&lt;/a&gt;, &lt;a class="fn-backref" href="#id7"&gt;3&lt;/a&gt;)&lt;/em&gt; Ziadé T. &lt;a class="reference external" href="http://guide.python-distribute.org/"&gt;The Hitchhiker's Guide to Packaging&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="django" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Django community. &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"&gt;Django Coding Style&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="lincolnloop" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Lincoln Loop company. &lt;a class="reference external" href="http://lincolnloop.com/django-best-practices/"&gt;Django Best Practices&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="reitz" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Reitz K. &lt;a class="reference external" href="http://kennethreitz.com/repository-structure-and-python.html"&gt;Repository Structure and Python&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="meyer" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id13"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Meyer C. &lt;a class="reference external" href="http://carljm.github.com/django-testing-slides/"&gt;Testing and Django&lt;/a&gt; at PyCon US 2012.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="app-skeleton" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id14"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Мавлеткулов М. &lt;a class="reference external" href="https://github.com/marselester/reusable-django-app-skeleton"&gt;Reusable Django app skeleton&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="django-todo" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id16"&gt;[8]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Мавлеткулов М. &lt;a class="reference external" href="https://github.com/marselester/django-todo"&gt;Система управления цепочками задач&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="django"></category><category term="infrastructure"></category></entry><entry><title>Вычислительные методы одномерной оптимизации</title><link href="http://marselester.com/computing-methods-of-one-dimensional-optimization.html" rel="alternate"></link><published>2010-10-06T00:00:00+07:00</published><updated>2010-10-06T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2010-10-06:/computing-methods-of-one-dimensional-optimization.html</id><summary type="html">&lt;p&gt;На третьем курсе по предмету методы оптимизации делали лабораторную работу на
тему «Вычислительные методы одномерной оптимизации».
Задача заключалась в поиске безусловного минимума функции
&lt;tt class="docutils literal"&gt;f(x) = pow(x, 3) – x + pow(e, &lt;span class="pre"&gt;-x)&lt;/span&gt;&lt;/tt&gt; на начальном интервале &lt;tt class="docutils literal"&gt;[0, 1]&lt;/tt&gt;
с точностью &lt;tt class="docutils literal"&gt;0.00001&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Вычисления производились через:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;пассивный метод;&lt;/li&gt;
&lt;li&gt;равномерные блочные методы;&lt;/li&gt;
&lt;li&gt;метод …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;На третьем курсе по предмету методы оптимизации делали лабораторную работу на
тему «Вычислительные методы одномерной оптимизации».
Задача заключалась в поиске безусловного минимума функции
&lt;tt class="docutils literal"&gt;f(x) = pow(x, 3) – x + pow(e, &lt;span class="pre"&gt;-x)&lt;/span&gt;&lt;/tt&gt; на начальном интервале &lt;tt class="docutils literal"&gt;[0, 1]&lt;/tt&gt;
с точностью &lt;tt class="docutils literal"&gt;0.00001&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Вычисления производились через:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;пассивный метод;&lt;/li&gt;
&lt;li&gt;равномерные блочные методы;&lt;/li&gt;
&lt;li&gt;метод золотого сечения;&lt;/li&gt;
&lt;li&gt;метод чисел Фибоначчи;&lt;/li&gt;
&lt;li&gt;метод касательной.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Наилучшим по количеству экспериментов оказался метод чисел Фибоначчи,
наихудшим – пассивный метод. Наилучшим по времени работы оказался метод
золотого сечения, наихудшим – пассивный метод. Так же было установлено, что
для данной функции блочный метод работает лучше с блоками размерами 3 и 8, для
нечетного и четного соответственно.&lt;/p&gt;
&lt;p&gt;Если кому-нибудь пригодилось – &lt;a class="reference external" href="https://dl.dropbox.com/u/15875449/fx.zip"&gt;архив с исходниками&lt;/a&gt; на php.&lt;/p&gt;
</content><category term="php"></category><category term="mathematical optimization"></category></entry><entry><title>Определение нажатия комбинации клавиш средствами BIOS на ассемблере</title><link href="http://marselester.com/definition-of-pressing-of-a-combination-of-keys-by-means-BIOS-on-the-assembler.html" rel="alternate"></link><published>2009-12-03T00:00:00+07:00</published><updated>2009-12-03T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2009-12-03:/definition-of-pressing-of-a-combination-of-keys-by-means-BIOS-on-the-assembler.html</id><summary type="html">&lt;p&gt;По учебе понадобилось написать программу на ассемблере, которая должна
распознать нажатие «горячей» комбинации клавиш &lt;tt class="docutils literal"&gt;LeftCtrl+RightShift+F3&lt;/tt&gt; и
реагировать на него звуковым сигналом. Информации/примеров по этой теме
маловато, по этому решил опубликовать свою программку.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;masm&lt;/span&gt;
&lt;span class="nf"&gt;.model&lt;/span&gt; &lt;span class="nv"&gt;small&lt;/span&gt;
&lt;span class="nf"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;span class="nf"&gt;.data&lt;/span&gt;
    &lt;span class="nf"&gt;Msg_about&lt;/span&gt; &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Распознать нажатие «горячей» комбинации клавиш&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Dh …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;По учебе понадобилось написать программу на ассемблере, которая должна
распознать нажатие «горячей» комбинации клавиш &lt;tt class="docutils literal"&gt;LeftCtrl+RightShift+F3&lt;/tt&gt; и
реагировать на него звуковым сигналом. Информации/примеров по этой теме
маловато, по этому решил опубликовать свою программку.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;masm&lt;/span&gt;
&lt;span class="nf"&gt;.model&lt;/span&gt; &lt;span class="nv"&gt;small&lt;/span&gt;
&lt;span class="nf"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;span class="nf"&gt;.data&lt;/span&gt;
    &lt;span class="nf"&gt;Msg_about&lt;/span&gt; &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Распознать нажатие «горячей» комбинации клавиш&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Dh&lt;/span&gt;
              &lt;span class="kd"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;LeftCtrl+RightShift+F3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Dh&lt;/span&gt;
              &lt;span class="kd"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;и реагировать на него звуковым сигналом&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Dh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;

&lt;span class="nf"&gt;.code&lt;/span&gt;

&lt;span class="nl"&gt;start:&lt;/span&gt;
    &lt;span class="c1"&gt;; Инициализация сегментного регистра ds&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;ax&lt;/span&gt;

    &lt;span class="c1"&gt;; Видеорежим 3 (очистка экрана и установка курсора в 0, 0)&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0003h&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;10h&lt;/span&gt;

    &lt;span class="c1"&gt;; Вывод сообщения на экран&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;offset&lt;/span&gt; &lt;span class="nv"&gt;Msg_about&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;21h&lt;/span&gt;

    &lt;span class="c1"&gt;; Чтение символа с ожиданием&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;16h&lt;/span&gt;

    &lt;span class="c1"&gt;; Проверка нажатия Ctrl+F3&lt;/span&gt;
    &lt;span class="nf"&gt;cmp&lt;/span&gt; &lt;span class="nb"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;60h&lt;/span&gt;
    &lt;span class="nf"&gt;jne&lt;/span&gt; &lt;span class="nv"&gt;exit&lt;/span&gt;

    &lt;span class="c1"&gt;; Получение состояния клавиатуры&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;12h&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;16h&lt;/span&gt;

    &lt;span class="c1"&gt;; Проверка нажатия LeftCtrl&lt;/span&gt;
    &lt;span class="nf"&gt;test&lt;/span&gt; &lt;span class="nb"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mb"&gt;1b&lt;/span&gt;
    &lt;span class="nf"&gt;jz&lt;/span&gt; &lt;span class="nv"&gt;exit&lt;/span&gt;

    &lt;span class="c1"&gt;; Проверка нажатия RightShift&lt;/span&gt;
    &lt;span class="nf"&gt;test&lt;/span&gt; &lt;span class="nb"&gt;al&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mb"&gt;1b&lt;/span&gt;
    &lt;span class="nf"&gt;jz&lt;/span&gt; &lt;span class="nv"&gt;exit&lt;/span&gt;

    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;; Вывод символа&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="c1"&gt;; Сигнал&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;21h&lt;/span&gt;

    &lt;span class="c1"&gt;; Завершение программы, возврат управления ОС&lt;/span&gt;
    &lt;span class="nl"&gt;exit:&lt;/span&gt;
    &lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="nb"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;4c00h&lt;/span&gt;
    &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mh"&gt;21h&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Для чтения символа используется функция &lt;tt class="docutils literal"&gt;16h BIOS&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;AH = 0&lt;/p&gt;
&lt;p&gt;На выходе в AL = ASCII-код символа, 0 или префикс скан-кода, АН = скан-код
нажатой клавиши или расширенный ASCII-код.&lt;/p&gt;
&lt;p&gt;Далее производится сравнение регистра AH со скан-кодом 60h (нажатие Ctrl+F3).&lt;/p&gt;
&lt;p&gt;Потом получаем состояния клавиатуры. Используется функция &lt;tt class="docutils literal"&gt;16h BIOS&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;AH = 12h&lt;/p&gt;
&lt;p&gt;На выходе в AX заносится состояние клавиатуры. Нас интересует только первый
бит AH (LeftCtrl) и первый бит AL (RightShift).&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Состояние клавиатуры&lt;/h2&gt;
&lt;div class="section" id="al"&gt;
&lt;h3&gt;AL&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Бит 7: Ins&lt;/li&gt;
&lt;li&gt;Бит 6: CapsLock&lt;/li&gt;
&lt;li&gt;Бит 5: NumLock&lt;/li&gt;
&lt;li&gt;Бит 4: ScrollLock&lt;/li&gt;
&lt;li&gt;Бит 3: Alt (любой Alt для функции 02h, часто только левый Alt для 12h/22h)&lt;/li&gt;
&lt;li&gt;Бит 2: Ctrl (любой)&lt;/li&gt;
&lt;li&gt;Бит 1: LeftShift&lt;/li&gt;
&lt;li&gt;Бит 0: RightShift&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ah"&gt;
&lt;h3&gt;AH&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Бит 7: SysRq&lt;/li&gt;
&lt;li&gt;Бит 6: CapsLock&lt;/li&gt;
&lt;li&gt;Бит 5: NumLock&lt;/li&gt;
&lt;li&gt;Бит 4: ScrollLock&lt;/li&gt;
&lt;li&gt;Бит 3: RightAlt&lt;/li&gt;
&lt;li&gt;Бит 2: RightCtrl&lt;/li&gt;
&lt;li&gt;Бит 1: LeftAlt&lt;/li&gt;
&lt;li&gt;Бит 0: LeftCtrl&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="assembler"></category></entry><entry><title>Моделирование одноканальной СМО с отказами</title><link href="http://marselester.com/modeling-single-channel-queue-with-refusals.html" rel="alternate"></link><published>2009-05-30T00:00:00+07:00</published><updated>2009-05-30T00:00:00+07:00</updated><author><name>Marsel Mavletkulov</name></author><id>tag:marselester.com,2009-05-30:/modeling-single-channel-queue-with-refusals.html</id><summary type="html">&lt;p&gt;Дана одноканальная система массового обслуживания с отказами. В нее поступают
заявки через промежуток времени &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, где &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; – случайная величина,
подчиненная равномерному закону распределения. Время обслуживания заявки
системой &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; также является случайной величиной с показательным законом
распределения. Если к моменту прихода заявки канал занят, заявка покидает
систему необслуженной.&lt;/p&gt;
&lt;p&gt;Изначально код был …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Дана одноканальная система массового обслуживания с отказами. В нее поступают
заявки через промежуток времени &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, где &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; – случайная величина,
подчиненная равномерному закону распределения. Время обслуживания заявки
системой &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; также является случайной величиной с показательным законом
распределения. Если к моменту прихода заявки канал занят, заявка покидает
систему необслуженной.&lt;/p&gt;
&lt;p&gt;Изначально код был написан на php, вот &lt;a class="reference external" href="https://github.com/marselester/single-channel-queuing"&gt;пример на python 3&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestPoll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Iterator that yields random requests and keeps statistic.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_to_finish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intensity_of_service_flow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time_to_finish&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intensity_of_service_flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intensity_of_service_flow&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Total: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Processed: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_processed_requests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Refused: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_refused_requests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Proportion of processed requests: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proportion_of_processed_requests&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Probability of refuse: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;probability_of_refuse&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Absolute bandwidth: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs_bandwidth&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_when_channel_will_be_free&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_processed_requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_refused_requests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_finish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;
        &lt;span class="n"&gt;time_when_request_came_in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;time_when_request_came_in&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_can_system_process_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_processed_requests&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="n"&gt;time_for_which_request_has_taken_channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt; \
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expovariate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intensity_of_service_flow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_when_channel_will_be_free&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt; \
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;time_for_which_request_has_taken_channel&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;request added to queue at &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_refused_requests&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;requests refused at &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_can_system_process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_uptime&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_when_channel_will_be_free&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_processed_requests&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_refused_requests&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;abs_bandwidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_processed_requests&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_to_finish&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;proportion_of_processed_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_processed_requests&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;probability_of_refuse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qty_of_refused_requests&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;intensity_of_service_flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;span class="n"&gt;time_to_finish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;
&lt;span class="n"&gt;request_poll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestPoll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_to_finish&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intensity_of_service_flow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request_poll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_poll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="python"></category><category term="modeling"></category><category term="single-channel queue"></category></entry></feed>