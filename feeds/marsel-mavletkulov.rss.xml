<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>marselester's blog - Marsel Mavletkulov</title><link>https://marselester.com/</link><description></description><lastBuildDate>Sun, 02 Apr 2023 00:00:00 +0700</lastBuildDate><item><title>DIY CPU profiler: position independent executable ü•ß</title><link>https://marselester.com/diy-cpu-profiler-position-independent-executable.html</link><description>&lt;p&gt;In the &lt;a href="https://marselester.com/diy-cpu-profiler-the-simplest-case-of-symbolization.html"&gt;simplest case of symbolization&lt;/a&gt;
we used &lt;code&gt;-fno-pie -no-pie&lt;/code&gt; flags, so
gcc wouldn't produce a position independent executable (PIE).
It is produced by default for security measures such as
address space layout randomization (ASLR).
That means each time the program runs,
its segments are loaded into different regions of ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sun, 02 Apr 2023 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2023-04-02:/diy-cpu-profiler-position-independent-executable.html</guid><category>bpf</category><category>profiling</category></item><item><title>DIY CPU profiler: the simplest case of symbolization</title><link>https://marselester.com/diy-cpu-profiler-the-simplest-case-of-symbolization.html</link><description>&lt;p&gt;In the &lt;a href="https://marselester.com/diy-cpu-profiler-from-bpf-maps-to-pprof.html"&gt;BPF maps to pprof&lt;/a&gt; post
we managed to collect CPU samples and store them in pprof format.
Here I would like to explore the simplest case of symbolization
and put shared libraries aside.&lt;/p&gt;
&lt;p&gt;Symbolization is resolving sampled memory addresses to function names (symbols).
In our case, simply searching ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Thu, 23 Mar 2023 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2023-03-23:/diy-cpu-profiler-the-simplest-case-of-symbolization.html</guid><category>bpf</category><category>profiling</category></item><item><title>Linux process</title><link>https://marselester.com/linux-process.html</link><description>&lt;p&gt;Being curious about BPF, I studied source code of several programs from the BCC libbpf-tools.
BPF performance tools book aided me to navigate BPF C code.
For example, it explained that a BPF program has to use helpers because it can't access arbitrary memory (outside of BPF) and can't call ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Tue, 31 Jan 2023 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2023-01-31:/linux-process.html</guid><category>architecture</category><category>linux</category></item><item><title>Bandwitch üßô‚Äç‚ôÄÔ∏è of CPU and storages</title><link>https://marselester.com/bandwitch-of-cpu-and-storages.html</link><description>&lt;p&gt;Let us begin with a definition of a CPU clock rate ‚è∞.
It refers to the frequency at which the clock generator (an oscillator crystal)
of a processor can generate pulses, which are used to synchronize the operations of its components.
For example, 1GHz CPU implies that its clock runs at ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sun, 08 Jan 2023 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2023-01-08:/bandwitch-of-cpu-and-storages.html</guid><category>architecture</category><category>performance</category></item><item><title>DIY CPU profiler: from BPF maps to pprof</title><link>https://marselester.com/diy-cpu-profiler-from-bpf-maps-to-pprof.html</link><description>&lt;p&gt;&lt;a href="https://marselester.com/continuous-profiling-in-go.html"&gt;In previous post&lt;/a&gt;
I had a DIY BPF profiler printing stack trace IDs of a given process,
though they were not very helpful.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;Ôπ© sudo go run ./cmd/profiler/ -pid 15958&lt;/span&gt;
&lt;span class="go"&gt;Waiting for stack traces...&lt;/span&gt;
&lt;span class="go"&gt;{PID:15958 UserStackID:132 KernelStackID:114} seen 1 times&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's try to show more useful information ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Thu, 20 Oct 2022 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2022-10-20:/diy-cpu-profiler-from-bpf-maps-to-pprof.html</guid><category>bpf</category><category>golang</category><category>profiling</category></item><item><title>Continuous profiling in Go</title><link>https://marselester.com/continuous-profiling-in-go.html</link><description>&lt;p&gt;In this post I explore possibilities of continuous profiling of Go programs
using Parca and also peek under the hood of its BPF agent.
You can find the results of my experiments in
&lt;a href="https://github.com/marselester/diy-parca-agent"&gt;github.com/marselester/diy-parca-agent&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Ad hoc profiling&lt;/h2&gt;
&lt;p&gt;I was looking for a way to profile Go programs ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 22 Apr 2022 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2022-04-22:/continuous-profiling-in-go.html</guid><category>bpf</category><category>golang</category><category>monitoring</category><category>profiling</category></item><item><title>BPF Go program in Kubernetes</title><link>https://marselester.com/bpf-go-program-in-kubernetes.html</link><description>&lt;p&gt;BPF opens a lot of possibilities of making observability tools running in Kubernetes.
One can start with &lt;a href="https://github.com/iovisor/bcc/tree/master/libbpf-tools"&gt;BCC libbpf-tools&lt;/a&gt; written in C,
e.g., launch tcpconnlat program and process its stdout with another program to
detect cases when it took too long to establish a TCP connection.
For example, &lt;code&gt;curl ‚Ä¶&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 17 Nov 2021 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2021-11-17:/bpf-go-program-in-kubernetes.html</guid><category>bpf</category><category>golang</category><category>kubernetes</category></item><item><title>BPF: Go frontend for tcpconnect</title><link>https://marselester.com/bpf-go-frontend-for-tcpconnect.html</link><description>&lt;p&gt;&lt;a href="https://marselester.com/bpf-go-frontend-for-execsnoop.html"&gt;In the previos BPF post&lt;/a&gt;
I shared my experiment of writing Go frontend for execsnoop.
Here I would like to focus on tcpconnect, a BCC tool to trace new TCP active connections.
It is useful for determining who is connecting to whom.
This works by tracing the &lt;code&gt;tcp_v4_connect()&lt;/code&gt; and &lt;code&gt;tcp_v6_connect ‚Ä¶&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Mon, 01 Nov 2021 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2021-11-01:/bpf-go-frontend-for-tcpconnect.html</guid><category>bpf</category><category>golang</category></item><item><title>BPF: Go frontend for execsnoop</title><link>https://marselester.com/bpf-go-frontend-for-execsnoop.html</link><description>&lt;p&gt;After reading Brendan Gregg's books about BPF I was excited to try and implement something in Go.
At a first glance it turned out I would need to install LLVM, Clang, and kernel header dependencies to run a simple program.
Fortunately &lt;a href="https://www.brendangregg.com/blog/2020-11-04/bpf-co-re-btf-libbpf.html"&gt;BTF, CO-RE technologies&lt;/a&gt;
eliminate those dependencies though kernel &amp;gt;=5 ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Tue, 26 Oct 2021 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2021-10-26:/bpf-go-frontend-for-execsnoop.html</guid><category>bpf</category><category>golang</category></item><item><title>Ambassador as API Gateway</title><link>https://marselester.com/apigate-ambassador.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/gateway"&gt;API gateway&lt;/a&gt;
acts as a reverse proxy, routing API requests from clients to services.
Usually it also performs authentication and rate limiting, so the services behind the gate don't have to.
In this short tutorial we'll see how to achieve that with &lt;a class="reference external" href="https://getambassador.io/"&gt;Ambassador&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The demo is based on a dummy ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 13 Mar 2019 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2019-03-13:/apigate-ambassador.html</guid><category>ambassador</category><category>kubernetes</category><category>api gateway</category><category>auth</category><category>rate limiting</category></item><item><title>Traefik as API Gateway</title><link>https://marselester.com/apigate-traefik.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/gateway"&gt;API gateway&lt;/a&gt;
acts as a reverse proxy, routing API requests from clients to services.
Usually it also performs authentication and rate limiting, so the services behind the gate don't have to.
In this short tutorial we'll see how to achieve that with &lt;a class="reference external" href="https://traefik.io/"&gt;Traefik&lt;/a&gt; reverse-proxy.&lt;/p&gt;
&lt;p&gt;The demo is based on a ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Tue, 12 Mar 2019 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2019-03-12:/apigate-traefik.html</guid><category>traefik</category><category>kubernetes</category><category>api gateway</category><category>auth</category><category>rate limiting</category></item><item><title>How to Structure Go Projects</title><link>https://marselester.com/how-to-structure-go-projects.html</link><description>&lt;p&gt;I came to Go from Django where the framework defines project layout, thus I wanted to know
how to structure my Go applications. After reading documentation and building a few Django projects,
you get a clear mental picture, as most of the questions are already answered.
That helps to keep ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 28 Sep 2018 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2018-09-28:/how-to-structure-go-projects.html</guid><category>golang</category><category>project structure</category><category>Domain-Driven Design</category></item><item><title>Forward DogStatsD Metrics to Prometheus</title><link>https://marselester.com/prometheus-via-dogstatsd.html</link><description>&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; StatsD doesn't have metric labels, DogStatsD does.&lt;/p&gt;
&lt;p&gt;This is a follow up post after
&lt;a class="reference external" href="https://marselester.com/django-prometheus-via-statsd.html"&gt;Instrumenting Django with Prometheus and StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;You got Prometheus up and running and eager to start instrumenting your Django application.
Don't be hasty and read &lt;a class="reference external" href="https://prometheus.io/docs/practices/instrumentation/"&gt;Prometheus Best Practices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's say our application has to ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 17 Jun 2017 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2017-06-17:/prometheus-via-dogstatsd.html</guid><category>prometheus</category><category>monitoring</category><category>statsd</category><category>dogstatsd</category><category>datadog</category></item><item><title>Instrumenting Django with Prometheus and StatsD</title><link>https://marselester.com/django-prometheus-via-statsd.html</link><description>&lt;p&gt;If you ever wondered how to monitor your Django application with Prometheus this article is for you.
Quick search on the topic will lead you to &lt;a class="reference external" href="https://github.com/korfuri/django-prometheus/"&gt;django-prometheus&lt;/a&gt;.
For those who don't want to use it, there is another way to export application metrics
via &lt;a class="reference external" href="https://www.datadoghq.com/blog/statsd/"&gt;StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to send ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 09 Jun 2017 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2017-06-09:/django-prometheus-via-statsd.html</guid><category>django</category><category>prometheus</category><category>kubernetes</category><category>monitoring</category><category>statsd</category><category>helm</category></item><item><title>Minukube &amp; Amazon EC2 Container Registry</title><link>https://marselester.com/minukube-aws-ecr.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://kubernetes.io/docs/getting-started-guides/minikube/"&gt;Minukube&lt;/a&gt; is an easy way to run Kubernetes locally.
When we want to build a Docker image in Minukube (so Kubernetes has an access to it),
we can configure our Docker client to communicate with the Minikube Docker daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;minikube start
&lt;span class="go"&gt;Starting local Kubernetes cluster...&lt;/span&gt;
&lt;span class="go"&gt;Kubectl is now configured to ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Mon, 05 Dec 2016 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2016-12-05:/minukube-aws-ecr.html</guid><category>kubernetes</category><category>aws</category><category>minukube</category></item><item><title>Prometheus on Kubernetes</title><link>https://marselester.com/prometheus-on-kubernetes.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is a monitoring toolkit.
Let's set it up on Kubernetes and test how it works by scraping HTTP request metrics
from &lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes"&gt;hello web application&lt;/a&gt;
which also runs in the same cluster.&lt;/p&gt;
&lt;p&gt;First of all, we need Kubernetes cluster running. It's easy to bootstrap one via &lt;a class="reference external" href="https://console.cloud.google.com"&gt;Google Container Engine&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gcloud ‚Ä¶&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sun, 13 Nov 2016 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2016-11-13:/prometheus-on-kubernetes.html</guid><category>prometheus</category><category>kubernetes</category><category>monitoring</category><category>golang</category><category>Google Container Engine</category></item><item><title>Django REST framework: pagination on PostgreSQL triggers</title><link>https://marselester.com/drf-pagination.html</link><description>&lt;p&gt;Django and Django REST Framework use SQL COUNT in pagination.
As your database grows SQL COUNT becomes too slow. Fortunately the frameworks
are well designed and allow to customize a way items are count.
Let me illustrate that on a typical &amp;quot;books&amp;quot; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 02 Apr 2016 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2016-04-02:/drf-pagination.html</guid><category>python</category><category>django</category><category>postgresql</category><category>django rest framework</category><category>pagination</category></item><item><title>API based on Flask</title><link>https://marselester.com/api-based-on-flask.html</link><description>&lt;p&gt;Here I want to consider implementation of API best practices which
usually don't follow Fielding's REST strictly. &lt;a class="reference external" href="https://github.com/marselester/api-example-based-on-flask"&gt;Example Flask project&lt;/a&gt;
is on GitHub.&lt;/p&gt;
&lt;div class="section" id="api-versioning"&gt;
&lt;h2&gt;API Versioning&lt;/h2&gt;
&lt;p&gt;Interfaces are changed hence versioning is mandatory in order to not annoy
your users. You might need to add new resource or field to particular ‚Ä¶&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Mon, 09 Dec 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-12-09:/api-based-on-flask.html</guid><category>python</category><category>flask</category><category>api</category></item><item><title>Slides about SaltStack</title><link>https://marselester.com/saltstack-slides.html</link><description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; I gave a talk with &lt;a class="reference external" href="https://twitter.com/shr"&gt;Simon Robson&lt;/a&gt; at &lt;a class="reference external" href="https://twitter.com/barcampcm"&gt;Beercamp&lt;/a&gt; in Chiang Mai,
Thailand on 12 Dec 2013. We compared Salt and &lt;a class="reference external" href="http://slid.es/simonrobson/ansible"&gt;Ansible&lt;/a&gt;.
Here are my &lt;a class="reference external" href="https://slid.es/marselester/saltstack"&gt;slides&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Tue, 03 Dec 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-12-03:/saltstack-slides.html</guid><category>salt</category><category>saltstack</category><category>slides</category><category>talk</category></item><item><title>Developing &amp; Deploying Django project with SaltStack</title><link>https://marselester.com/developing-and-deploying-django-project-with-saltstack.html</link><description>&lt;p&gt;Eventually you will need to deploy project,
but deployment was not considered in the &lt;a class="reference external" href="https://marselester.com/developing-django-project-with-saltstack.html"&gt;previous post&lt;/a&gt;. Let's find it out.&lt;/p&gt;
&lt;p&gt;Server configuration is different from local, thus environments will be needed
(at least production &lt;strong&gt;prod&lt;/strong&gt; and development &lt;strong&gt;dev&lt;/strong&gt;). Salt uses &lt;strong&gt;base&lt;/strong&gt;
environment by default.&lt;/p&gt;
&lt;p&gt;Environments are set in &lt;tt class="docutils literal"&gt;minion.conf ‚Ä¶&lt;/tt&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Thu, 28 Nov 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-11-28:/developing-and-deploying-django-project-with-saltstack.html</guid><category>python</category><category>django</category><category>vagrant</category><category>salt</category><category>saltstack</category></item><item><title>Developing Django project with SaltStack</title><link>https://marselester.com/developing-django-project-with-saltstack.html</link><description>&lt;p&gt;Let's use &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; as an example of Django project. I want it to
run in VirtualBox which is managed by Vagrant. Infrastructure management
is provided by SaltStack.&lt;/p&gt;
&lt;p&gt;I advise you to create separate folder for repositories (currently there
is only one) of project and clone &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; there.
Also ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 09 Nov 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-11-09:/developing-django-project-with-saltstack.html</guid><category>python</category><category>django</category><category>vagrant</category><category>salt</category><category>saltstack</category></item><item><title>Preparation to Python Interview</title><link>https://marselester.com/preparation-to-python-interview.html</link><description>&lt;p&gt;I decided to collect a little more information and experience during
preparation to Python developer interview. These are some information and
links which seemed important to me. Maybe it will be helpful.&lt;/p&gt;
&lt;div class="section" id="how-does-it-usually-go"&gt;
&lt;h2&gt;How does it usually go?&lt;/h2&gt;
&lt;div class="section" id="what-kind-of-projects-did-you-participate-in"&gt;
&lt;h3&gt;What kind of projects did you participate in?&lt;/h3&gt;
&lt;p&gt;What did you do at ‚Ä¶&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 02 Nov 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-11-02:/preparation-to-python-interview.html</guid><category>python</category><category>interview</category></item><item><title>Django TODO: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è</title><link>https://marselester.com/django-todo-testing-during-construction.html</link><description>&lt;p&gt;–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ -- –æ–¥–∏–Ω –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª–Ω–æ–π
—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.&lt;/p&gt;
&lt;p&gt;–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã --
–æ–Ω–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É —É–¥–æ–±–Ω–µ–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π, –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π,
—É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–π –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–π.&lt;/p&gt;
&lt;p&gt;–¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞ —Ü–µ–ª—è–º –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ï–≥–æ —Ü–µ–ª—å—é
—è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—à–∏–±–æ–∫. –£—Å–ø–µ—à–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–µ—Å—Ç, –Ω–∞—Ä—É—à–∞—é—â–∏–π —Ä–∞–±–æ—Ç—É –ü–û ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 13:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-testing-during-construction.html</guid><category>python</category><category>django</category><category>django-todo</category><category>testing</category></item><item><title>Django TODO: –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</title><link>https://marselester.com/django-todo-system-construction.html</link><description>&lt;p&gt;–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ
–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –§–æ—Ä–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, –ø—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å
–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -- —ç—Ç–æ
&amp;quot;–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π&amp;quot; –ø—Ä–æ—Ü–µ—Å—Å. –ü—Ä–æ–µ–∫—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –≤ —É–º–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
—Å—Ä–∞–∑—É –≤ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ. –û–Ω–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 12:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-system-construction.html</guid><category>python</category><category>django</category><category>django-todo</category><category>construction</category></item><item><title>Django TODO: –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã</title><link>https://marselester.com/django-todo-design-architecture.html</link><description>&lt;p&gt;–°–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.&lt;/p&gt;
&lt;p&gt;–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–º —Ü–µ–ª—ã–º. –ì–ª–∞–≤–Ω—ã–π —Ç–µ–∑–∏—Å —Å–∞–º–æ–π
–ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫–Ω–∏–≥–∏ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û &amp;quot;–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫–æ-–º–µ—Å—è—Ü&amp;quot; –≥–ª–∞—Å–∏—Ç, —á—Ç–æ
–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–π –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Ö
–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏. –•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
–ø—Ä–æ–±–ª–µ–º–µ &lt;a class="footnote-reference" href="#mcconnell" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –ø–æ–∑–≤–æ–ª—è–µ—Ç ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 11:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-design-architecture.html</guid><category>python</category><category>django</category><category>django-todo</category><category>architecture</category></item><item><title>Django TODO: –≤—ã—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–∏—Å—Ç–µ–º–µ</title><link>https://marselester.com/django-todo-development-of-system-requirements.html</link><description>&lt;p&gt;–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ú–∞–∫–∫–æ–Ω–µ–ª–ª–∞ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —Å–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å–æ–≤–µ—Ç—ã –Ω–∞ Django.
–î–ª—è —ç—Ç–æ–≥–æ —è –≤–∑—è–ª –∑–∞ –æ—Å–Ω–æ–≤—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º—ã &lt;a class="reference external" href="https://github.com/marselester/django-todo"&gt;Django TODO&lt;/a&gt;. –ò—Ç–∞–∫, –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø -- –≤—ã—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫
—Å–∏—Å—Ç–µ–º–µ.&lt;/p&gt;
&lt;p&gt;–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç, —á—Ç–æ –¥–æ–ª–∂–Ω–∞ –¥–µ–ª–∞—Ç—å —Å–∏—Å—Ç–µ–º–∞. –í–Ω–∏–º–∞–Ω–∏–µ –∫
—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–º–æ–≥–∞–µ—Ç —Å–≤–µ—Å—Ç–∏ –∫ –º–∏–Ω–∏–º—É–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –Ø–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 11:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-development-of-system-requirements.html</guid><category>python</category><category>django</category><category>django-todo</category><category>requirements</category></item><item><title>–°–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ Python/Django</title><link>https://marselester.com/links-to-best-practices-of-python-django.html</link><description>&lt;p&gt;–í–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —è —á–∞—Å—Ç–æ —Å–≤–µ—Ä—è—é—Å—å —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –º–Ω–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏,
—Å—Ç–∞—Ä–∞—é—Å—å —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º. –¶–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ -- –ª—É—á—à–µ
–ø—Ä–∏–≤–µ–¥—É —Å—Å—ã–ª–∫–∏.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 -- Style Guide for Python Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#long-lines-continuations"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;.
–í –Ω–µ–º —è –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
expended_time = (self.finish_date() - self.start_date
                 + datetime ‚Ä¶&lt;/pre&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/links-to-best-practices-of-python-django.html</guid><category>python</category><category>django</category><category>best practices</category></item><item><title>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ Django</title><link>https://marselester.com/splitting-settings-in-django.html</link><description>&lt;p&gt;–í &lt;a class="reference external" href="https://code.djangoproject.com/wiki/SplitSettings"&gt;Django wiki&lt;/a&gt; —Å–æ–±—Ä–∞–Ω—ã
—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è &lt;a class="reference external" href="http://senko.net/en/django-quickstart-skeleton-project/"&gt;–≤–∞—Ä–∏–∞–Ω—Ç&lt;/a&gt;, –æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –±–ª–æ–≥–µ
Senko Ra≈°iƒá:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
settings/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ base.py
‚îú‚îÄ‚îÄ development.py
‚îú‚îÄ‚îÄ local.py
‚îî‚îÄ‚îÄ production.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;base.py&lt;/tt&gt; —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è &lt;tt class="docutils literal"&gt;development.py&lt;/tt&gt; –∏
&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt;, –Ω–∞–ø—Ä–∏–º–µ—Ä:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MANAGERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADMINS&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Yekaterinburg&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt; —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/splitting-settings-in-django.html</guid><category>python</category><category>django</category><category>settings</category></item><item><title>–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ reusable Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π</title><link>https://marselester.com/short-overview-of-infrastructure-for-developing-reusable-django-apps.html</link><description>&lt;p&gt;–ù–∞—á–∏–Ω–∞—è –≤–ø–µ—Ä–≤—ã–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
–∑–∞—á–∞—Å—Ç—É—é —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏. –ü—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á—É–∂–¥–∞–µ–º—ã—Ö
–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Django –∫ —ç—Ç–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–Ω–µ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
—Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤, –≤–æ–ø—Ä–æ—Å—ã –ø–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏
–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –ø—É—Ç–∏
—Ä–µ—à–µ–Ω–∏—è —ç—Ç–∏—Ö –ø—Ä–æ–±–ª–µ–º.&lt;/p&gt;
&lt;p&gt;–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 13 Jun 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-13:/short-overview-of-infrastructure-for-developing-reusable-django-apps.html</guid><category>python</category><category>django</category><category>infrastructure</category></item><item><title>–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</title><link>https://marselester.com/computing-methods-of-one-dimensional-optimization.html</link><description>&lt;p&gt;–ù–∞ —Ç—Ä–µ—Ç—å–µ–º –∫—É—Ä—Å–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ–ª–∞–ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞
—Ç–µ–º—É ¬´–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏¬ª.
–ó–∞–¥–∞—á–∞ –∑–∞–∫–ª—é—á–∞–ª–∞—Å—å –≤ –ø–æ–∏—Å–∫–µ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ —Ñ—É–Ω–∫—Ü–∏–∏
&lt;tt class="docutils literal"&gt;f(x) = pow(x, 3) ‚Äì x + pow(e, &lt;span class="pre"&gt;-x)&lt;/span&gt;&lt;/tt&gt; –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ &lt;tt class="docutils literal"&gt;[0, 1]&lt;/tt&gt;
—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é &lt;tt class="docutils literal"&gt;0.00001&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;–í—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∏—Å—å —á–µ—Ä–µ–∑:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;–ø–∞—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥;&lt;/li&gt;
&lt;li&gt;—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –±–ª–æ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã;&lt;/li&gt;
&lt;li&gt;–º–µ—Ç–æ–¥ ‚Ä¶&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 06 Oct 2010 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2010-10-06:/computing-methods-of-one-dimensional-optimization.html</guid><category>php</category><category>mathematical optimization</category></item><item><title>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ BIOS –Ω–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ</title><link>https://marselester.com/definition-of-pressing-of-a-combination-of-keys-by-means-BIOS-on-the-assembler.html</link><description>&lt;p&gt;–ü–æ —É—á–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞
—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ ¬´–≥–æ—Ä—è—á–µ–π¬ª –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à &lt;tt class="docutils literal"&gt;LeftCtrl+RightShift+F3&lt;/tt&gt; –∏
—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –∑–≤—É–∫–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏/–ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
–º–∞–ª–æ–≤–∞—Ç–æ, –ø–æ —ç—Ç–æ–º—É —Ä–µ—à–∏–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º–∫—É.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;masm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;.model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;small&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;.stack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;.data&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;Msg_about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;db&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ ¬´–≥–æ—Ä—è—á–µ–π¬ª –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0Dh ‚Ä¶&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Thu, 03 Dec 2009 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2009-12-03:/definition-of-pressing-of-a-combination-of-keys-by-means-BIOS-on-the-assembler.html</guid><category>assembler</category></item><item><title>–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–π –°–ú–û —Å –æ—Ç–∫–∞–∑–∞–º–∏</title><link>https://marselester.com/modeling-single-channel-queue-with-refusals.html</link><description>&lt;p&gt;–î–∞–Ω–∞ –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å –æ—Ç–∫–∞–∑–∞–º–∏. –í –Ω–µ–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç
–∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, –≥–¥–µ &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; ‚Äì —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞,
–ø–æ–¥—á–∏–Ω–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–º—É –∑–∞–∫–æ–Ω—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
—Å–∏—Å—Ç–µ–º–æ–π &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; —Ç–∞–∫–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–æ–π —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º
—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ï—Å–ª–∏ –∫ –º–æ–º–µ–Ω—Ç—É –ø—Ä–∏—Ö–æ–¥–∞ –∑–∞—è–≤–∫–∏ –∫–∞–Ω–∞–ª –∑–∞–Ω—è—Ç, –∑–∞—è–≤–∫–∞ –ø–æ–∫–∏–¥–∞–µ—Ç
—Å–∏—Å—Ç–µ–º—É –Ω–µ–æ–±—Å–ª—É–∂–µ–Ω–Ω–æ–π.&lt;/p&gt;
&lt;p&gt;–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–æ–¥ –±—ã–ª ‚Ä¶&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 30 May 2009 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2009-05-30:/modeling-single-channel-queue-with-refusals.html</guid><category>python</category><category>modeling</category><category>single-channel queue</category></item></channel></rss>