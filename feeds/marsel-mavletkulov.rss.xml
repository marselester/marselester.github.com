<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>marselester's blog - Marsel Mavletkulov</title><link>https://marselester.com/</link><description></description><lastBuildDate>Wed, 13 Mar 2019 00:00:00 +0700</lastBuildDate><item><title>Ambassador as API Gateway</title><link>https://marselester.com/apigate-ambassador.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/gateway"&gt;API gateway&lt;/a&gt;
acts as a reverse proxy, routing API requests from clients to services.
Usually it also performs authentication and rate limiting, so the services behind the gate don't have to.
In this short tutorial we'll see how to achieve that with &lt;a class="reference external" href="https://getambassador.io/"&gt;Ambassador&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The demo is based on a dummy …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 13 Mar 2019 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2019-03-13:/apigate-ambassador.html</guid><category>ambassador</category><category>kubernetes</category><category>api gateway</category><category>auth</category><category>rate limiting</category></item><item><title>Traefik as API Gateway</title><link>https://marselester.com/apigate-traefik.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/microservices/design/gateway"&gt;API gateway&lt;/a&gt;
acts as a reverse proxy, routing API requests from clients to services.
Usually it also performs authentication and rate limiting, so the services behind the gate don't have to.
In this short tutorial we'll see how to achieve that with &lt;a class="reference external" href="https://traefik.io/"&gt;Traefik&lt;/a&gt; reverse-proxy.&lt;/p&gt;
&lt;p&gt;The demo is based on a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Tue, 12 Mar 2019 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2019-03-12:/apigate-traefik.html</guid><category>traefik</category><category>kubernetes</category><category>api gateway</category><category>auth</category><category>rate limiting</category></item><item><title>How to Structure Go Projects</title><link>https://marselester.com/how-to-structure-go-projects.html</link><description>&lt;p&gt;I came to Go from Django where the framework defines project layout, thus I wanted to know
how to structure my Go applications. After reading documentation and building a few Django projects,
you get a clear mental picture, as most of the questions are already answered.
That helps to keep …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 28 Sep 2018 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2018-09-28:/how-to-structure-go-projects.html</guid><category>golang</category><category>project structure</category><category>Domain-Driven Design</category></item><item><title>Forward DogStatsD Metrics to Prometheus</title><link>https://marselester.com/prometheus-via-dogstatsd.html</link><description>&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; StatsD doesn't have metric labels, DogStatsD does.&lt;/p&gt;
&lt;p&gt;This is a follow up post after
&lt;a class="reference external" href="https://marselester.com/django-prometheus-via-statsd.html"&gt;Instrumenting Django with Prometheus and StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;You got Prometheus up and running and eager to start instrumenting your Django application.
Don't be hasty and read &lt;a class="reference external" href="https://prometheus.io/docs/practices/instrumentation/"&gt;Prometheus Best Practices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's say our application has to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 17 Jun 2017 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2017-06-17:/prometheus-via-dogstatsd.html</guid><category>prometheus</category><category>monitoring</category><category>statsd</category><category>dogstatsd</category><category>datadog</category></item><item><title>Instrumenting Django with Prometheus and StatsD</title><link>https://marselester.com/django-prometheus-via-statsd.html</link><description>&lt;p&gt;If you ever wondered how to monitor your Django application with Prometheus this article is for you.
Quick search on the topic will lead you to &lt;a class="reference external" href="https://github.com/korfuri/django-prometheus/"&gt;django-prometheus&lt;/a&gt;.
For those who don't want to use it, there is another way to export application metrics
via &lt;a class="reference external" href="https://www.datadoghq.com/blog/statsd/"&gt;StatsD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to send …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 09 Jun 2017 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2017-06-09:/django-prometheus-via-statsd.html</guid><category>django</category><category>prometheus</category><category>kubernetes</category><category>monitoring</category><category>statsd</category><category>helm</category></item><item><title>Minukube &amp; Amazon EC2 Container Registry</title><link>https://marselester.com/minukube-aws-ecr.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://kubernetes.io/docs/getting-started-guides/minikube/"&gt;Minukube&lt;/a&gt; is an easy way to run Kubernetes locally.
When we want to build a Docker image in Minukube (so Kubernetes has an access to it),
we can configure our Docker client to communicate with the Minikube Docker daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; minikube start
&lt;span class="go"&gt;Starting local Kubernetes cluster...&lt;/span&gt;
&lt;span class="go"&gt;Kubectl is now configured to …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Mon, 05 Dec 2016 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2016-12-05:/minukube-aws-ecr.html</guid><category>kubernetes</category><category>aws</category><category>minukube</category></item><item><title>Prometheus on Kubernetes</title><link>https://marselester.com/prometheus-on-kubernetes.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; is a monitoring toolkit.
Let's set it up on Kubernetes and test how it works by scraping HTTP request metrics
from &lt;a class="reference external" href="https://github.com/marselester/prometheus-on-kubernetes"&gt;hello web application&lt;/a&gt;
which also runs in the same cluster.&lt;/p&gt;
&lt;p&gt;First of all, we need Kubernetes cluster running. It's easy to bootstrap one via &lt;a class="reference external" href="https://console.cloud.google.com"&gt;Google Container Engine&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gcloud …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sun, 13 Nov 2016 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2016-11-13:/prometheus-on-kubernetes.html</guid><category>prometheus</category><category>kubernetes</category><category>monitoring</category><category>golang</category><category>Google Container Engine</category></item><item><title>Django REST framework: pagination on PostgreSQL triggers</title><link>https://marselester.com/drf-pagination.html</link><description>&lt;p&gt;Django and Django REST Framework use SQL COUNT in pagination.
As your database grows SQL COUNT becomes too slow. Fortunately the frameworks
are well designed and allow to customize a way items are count.
Let me illustrate that on a typical &amp;quot;books&amp;quot; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 02 Apr 2016 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2016-04-02:/drf-pagination.html</guid><category>python</category><category>django</category><category>postgresql</category><category>django rest framework</category><category>pagination</category></item><item><title>API based on Flask</title><link>https://marselester.com/api-based-on-flask.html</link><description>&lt;p&gt;Here I want to consider implementation of API best practices which
usually don't follow Fielding's REST strictly. &lt;a class="reference external" href="https://github.com/marselester/api-example-based-on-flask"&gt;Example Flask project&lt;/a&gt;
is on GitHub.&lt;/p&gt;
&lt;div class="section" id="api-versioning"&gt;
&lt;h2&gt;API Versioning&lt;/h2&gt;
&lt;p&gt;Interfaces are changed hence versioning is mandatory in order to not annoy
your users. You might need to add new resource or field to particular …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Mon, 09 Dec 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-12-09:/api-based-on-flask.html</guid><category>python</category><category>flask</category><category>api</category></item><item><title>Slides about SaltStack</title><link>https://marselester.com/saltstack-slides.html</link><description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; I gave a talk with &lt;a class="reference external" href="https://twitter.com/shr"&gt;Simon Robson&lt;/a&gt; at &lt;a class="reference external" href="https://twitter.com/barcampcm"&gt;Beercamp&lt;/a&gt; in Chiang Mai,
Thailand on 12 Dec 2013. We compared Salt and &lt;a class="reference external" href="http://slid.es/simonrobson/ansible"&gt;Ansible&lt;/a&gt;.
Here are my &lt;a class="reference external" href="https://slid.es/marselester/saltstack"&gt;slides&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Tue, 03 Dec 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-12-03:/saltstack-slides.html</guid><category>salt</category><category>saltstack</category><category>slides</category><category>talk</category></item><item><title>Developing &amp; Deploying Django project with SaltStack</title><link>https://marselester.com/developing-and-deploying-django-project-with-saltstack.html</link><description>&lt;p&gt;Eventually you will need to deploy project,
but deployment was not considered in the &lt;a class="reference external" href="https://marselester.com/developing-django-project-with-saltstack.html"&gt;previous post&lt;/a&gt;. Let's find it out.&lt;/p&gt;
&lt;p&gt;Server configuration is different from local, thus environments will be needed
(at least production &lt;strong&gt;prod&lt;/strong&gt; and development &lt;strong&gt;dev&lt;/strong&gt;). Salt uses &lt;strong&gt;base&lt;/strong&gt;
environment by default.&lt;/p&gt;
&lt;p&gt;Environments are set in &lt;tt class="docutils literal"&gt;minion.conf …&lt;/tt&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Thu, 28 Nov 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-11-28:/developing-and-deploying-django-project-with-saltstack.html</guid><category>python</category><category>django</category><category>vagrant</category><category>salt</category><category>saltstack</category></item><item><title>Developing Django project with SaltStack</title><link>https://marselester.com/developing-django-project-with-saltstack.html</link><description>&lt;p&gt;Let's use &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; as an example of Django project. I want it to
run in VirtualBox which is managed by Vagrant. Infrastructure management
is provided by SaltStack.&lt;/p&gt;
&lt;p&gt;I advise you to create separate folder for repositories (currently there
is only one) of project and clone &lt;a class="reference external" href="https://github.com/marselester/abstract-internal-messaging"&gt;Messaging System&lt;/a&gt; there.
Also …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 09 Nov 2013 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2013-11-09:/developing-django-project-with-saltstack.html</guid><category>python</category><category>django</category><category>vagrant</category><category>salt</category><category>saltstack</category></item><item><title>Preparation to Python Interview</title><link>https://marselester.com/preparation-to-python-interview.html</link><description>&lt;p&gt;I decided to collect a little more information and experience during
preparation to Python developer interview. These are some information and
links which seemed important to me. Maybe it will be helpful.&lt;/p&gt;
&lt;div class="section" id="how-does-it-usually-go"&gt;
&lt;h2&gt;How does it usually go?&lt;/h2&gt;
&lt;div class="section" id="what-kind-of-projects-did-you-participate-in"&gt;
&lt;h3&gt;What kind of projects did you participate in?&lt;/h3&gt;
&lt;p&gt;What did you do at …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 02 Nov 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-11-02:/preparation-to-python-interview.html</guid><category>python</category><category>interview</category></item><item><title>Django TODO: тестирование во время конструирования</title><link>https://marselester.com/django-todo-testing-during-construction.html</link><description>&lt;p&gt;Тестирование, выполняемое разработчиками -- один из важнейших элементов полной
стратегии тестирования.&lt;/p&gt;
&lt;p&gt;Тестирование может указать только на отдельные дефектные области программы --
оно не сделает программу удобнее в использовании, более быстрой, компактной,
удобочитаемой или расширяемой.&lt;/p&gt;
&lt;p&gt;Цель тестирования противоположна целям других этапов разработки. Его целью
является нахождение ошибок. Успешным считается тест, нарушающий работу ПО …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 13:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-testing-during-construction.html</guid><category>python</category><category>django</category><category>django-todo</category><category>testing</category></item><item><title>Django TODO: конструирование системы</title><link>https://marselester.com/django-todo-system-construction.html</link><description>&lt;p&gt;При работе над проектом конструирование включает другие процессы, в том числе
проектирование. Формальная архитектура дает ответы только на вопросы
системного уровня, при этом значительная часть проектирования может быть
намеренно оставлена на этап конструирования. Проектирование -- это
&amp;quot;постепенный&amp;quot; процесс. Проекты приложений не возникают в умах разработчиков
сразу в готовом виде. Они развиваются …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 12:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-system-construction.html</guid><category>python</category><category>django</category><category>django-todo</category><category>construction</category></item><item><title>Django TODO: проектирование архитектуры системы</title><link>https://marselester.com/django-todo-design-architecture.html</link><description>&lt;p&gt;Следующим этапом разработки системы является проектирование архитектуры.&lt;/p&gt;
&lt;p&gt;Архитектура должна быть продуманным концептуальным целым. Главный тезис самой
популярной книги по разработке ПО &amp;quot;Мифический человеко-месяц&amp;quot; гласит, что
основной проблемой, характерной для крупных систем, является поддержание их
концептуальной целостности. Хорошая архитектура должна соответствовать
проблеме &lt;a class="footnote-reference" href="#mcconnell" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Разделение системы на подсистемы на уровне архитектуры, позволяет …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 11:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-design-architecture.html</guid><category>python</category><category>django</category><category>django-todo</category><category>architecture</category></item><item><title>Django TODO: выработка требований к системе</title><link>https://marselester.com/django-todo-development-of-system-requirements.html</link><description>&lt;p&gt;После прочтения Макконелла захотелось спроецировать его советы на Django.
Для этого я взял за основу разработку системы &lt;a class="reference external" href="https://github.com/marselester/django-todo"&gt;Django TODO&lt;/a&gt;. Итак, первый этап -- выработка требований к
системе.&lt;/p&gt;
&lt;p&gt;Требования подробно описывают, что должна делать система. Внимание к
требованиям помогает свести к минимуму изменения системы после начала
разработки. Явные требования помогают гарантировать, что …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 11:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/django-todo-development-of-system-requirements.html</guid><category>python</category><category>django</category><category>django-todo</category><category>requirements</category></item><item><title>Соглашения по разработке на Python/Django</title><link>https://marselester.com/links-to-best-practices-of-python-django.html</link><description>&lt;p&gt;Во время разработки я часто сверяюсь с известными мне соглашениями,
стараюсь следовать рекомендациям. Цитировать их не имеет смысла -- лучше
приведу ссылки.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 -- Style Guide for Python Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#long-lines-continuations"&gt;Code Like a Pythonista: Idiomatic Python&lt;/a&gt;.
В нем я нашел ответы на вопросы форматирования длинных строк:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
expended_time = (self.finish_date() - self.start_date
                 + datetime …&lt;/pre&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/links-to-best-practices-of-python-django.html</guid><category>python</category><category>django</category><category>best practices</category></item><item><title>Разделение настроек в Django</title><link>https://marselester.com/splitting-settings-in-django.html</link><description>&lt;p&gt;В &lt;a class="reference external" href="https://code.djangoproject.com/wiki/SplitSettings"&gt;Django wiki&lt;/a&gt; собраны
различные способы разделения настроек. Мне нравится &lt;a class="reference external" href="http://senko.net/en/django-quickstart-skeleton-project/"&gt;вариант&lt;/a&gt;, описанный в блоге
Senko Rašić:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
settings/
├── __init__.py
├── base.py
├── development.py
├── local.py
└── production.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;base.py&lt;/tt&gt; содержит общие настройки для &lt;tt class="docutils literal"&gt;development.py&lt;/tt&gt; и
&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt;, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MANAGERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADMINS&lt;/span&gt;

&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Yekaterinburg&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;production.py&lt;/tt&gt; содержит настройки для …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Fri, 29 Jun 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-29:/splitting-settings-in-django.html</guid><category>python</category><category>django</category><category>settings</category></item><item><title>Краткий обзор инфраструктуры для разработки reusable Django приложений</title><link>https://marselester.com/short-overview-of-infrastructure-for-developing-reusable-django-apps.html</link><description>&lt;p&gt;Начиная впервые разрабатывать веб-приложения на новом фреймворке программист
зачастую сталкивается с некоторыми трудностями. При разработке отчуждаемых
веб-приложений на Django к этим проблемам необходимо отнести организацию
файлов в проекте, обнаружение тестов, вопросы пакетирования приложений и
организации автоматизированного тестирования. В данной статье приведены пути
решения этих проблем.&lt;/p&gt;
&lt;p&gt;Важно знать различия между двумя …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 13 Jun 2012 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2012-06-13:/short-overview-of-infrastructure-for-developing-reusable-django-apps.html</guid><category>python</category><category>django</category><category>infrastructure</category></item><item><title>Вычислительные методы одномерной оптимизации</title><link>https://marselester.com/computing-methods-of-one-dimensional-optimization.html</link><description>&lt;p&gt;На третьем курсе по предмету методы оптимизации делали лабораторную работу на
тему «Вычислительные методы одномерной оптимизации».
Задача заключалась в поиске безусловного минимума функции
&lt;tt class="docutils literal"&gt;f(x) = pow(x, 3) – x + pow(e, &lt;span class="pre"&gt;-x)&lt;/span&gt;&lt;/tt&gt; на начальном интервале &lt;tt class="docutils literal"&gt;[0, 1]&lt;/tt&gt;
с точностью &lt;tt class="docutils literal"&gt;0.00001&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Вычисления производились через:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;пассивный метод;&lt;/li&gt;
&lt;li&gt;равномерные блочные методы;&lt;/li&gt;
&lt;li&gt;метод …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Wed, 06 Oct 2010 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2010-10-06:/computing-methods-of-one-dimensional-optimization.html</guid><category>php</category><category>mathematical optimization</category></item><item><title>Определение нажатия комбинации клавиш средствами BIOS на ассемблере</title><link>https://marselester.com/definition-of-pressing-of-a-combination-of-keys-by-means-BIOS-on-the-assembler.html</link><description>&lt;p&gt;По учебе понадобилось написать программу на ассемблере, которая должна
распознать нажатие «горячей» комбинации клавиш &lt;tt class="docutils literal"&gt;LeftCtrl+RightShift+F3&lt;/tt&gt; и
реагировать на него звуковым сигналом. Информации/примеров по этой теме
маловато, по этому решил опубликовать свою программку.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;masm&lt;/span&gt;
&lt;span class="nf"&gt;.model&lt;/span&gt; &lt;span class="nv"&gt;small&lt;/span&gt;
&lt;span class="nf"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;span class="nf"&gt;.data&lt;/span&gt;
    &lt;span class="nf"&gt;Msg_about&lt;/span&gt; &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Распознать нажатие «горячей» комбинации клавиш&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0Dh …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Thu, 03 Dec 2009 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2009-12-03:/definition-of-pressing-of-a-combination-of-keys-by-means-BIOS-on-the-assembler.html</guid><category>assembler</category></item><item><title>Моделирование одноканальной СМО с отказами</title><link>https://marselester.com/modeling-single-channel-queue-with-refusals.html</link><description>&lt;p&gt;Дана одноканальная система массового обслуживания с отказами. В нее поступают
заявки через промежуток времени &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, где &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; – случайная величина,
подчиненная равномерному закону распределения. Время обслуживания заявки
системой &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; также является случайной величиной с показательным законом
распределения. Если к моменту прихода заявки канал занят, заявка покидает
систему необслуженной.&lt;/p&gt;
&lt;p&gt;Изначально код был …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marsel Mavletkulov</dc:creator><pubDate>Sat, 30 May 2009 00:00:00 +0700</pubDate><guid isPermaLink="false">tag:marselester.com,2009-05-30:/modeling-single-channel-queue-with-refusals.html</guid><category>python</category><category>modeling</category><category>single-channel queue</category></item></channel></rss>