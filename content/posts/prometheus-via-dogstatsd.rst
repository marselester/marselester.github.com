=======================================
Forward DogStatsD Metrics to Prometheus
=======================================

:date: 2017-06-17
:tags: prometheus, monitoring, statsd, dogstatsd, datadog
:category: Infrastructure
:slug: prometheus-via-dogstatsd

**tl;dr:** StatsD doesn't have metric labels, DogStatsD does.

This is a follow up post after
`Instrumenting Django with Prometheus and StatsD <https://marselester.com/django-prometheus-via-statsd.html>`_.

----

You got Prometheus up and running and eager to start instrumenting your Django application.
Don't be hasty and read `Prometheus Best Practices <https://prometheus.io/docs/practices/instrumentation/>`_.

Let's say our application has to use a Python library to request weather forecast.
Sometimes Weather API server doesn't work as expected and we find HTTP 500 status codes in our application logs.
Out of curiosity we want to know how often that happens.
What if we already have to look for another forecast provider?

First idea could be using a counter "weatherapi_responses_500_total".
From the Prometheus docs:

    When reporting failures, you should generally have some other metric
    representing the total number of attempts.
    This makes the failure ratio easy to calculate.

Alright, then we need to count "HTTP 200 OK" API responses as well "weatherapi_responses_200_total".
But what about other HTTP status codes? Shall we create metrics for each of them?

    When you have multiple metrics that you want to add/average/sum,
    they should usually be one metric with labels rather than multiple metrics.

As this is exactly our case, we should use Prometheus labels. Therefore our
metric name should be "weatherapi_responses_total" with a "code" label for the HTTP response code.

Depending on a scenario, we might have multiple API clients in our application.
For example, we may generalize metric to "api_responses_total" with
the following labels "code=200", "service=weather".

Although we should keep it sane and not overuse labels.

StatsD by Datadog
-----------------

In `the previous post <https://marselester.com/django-prometheus-via-statsd.html>`_
we used StatsD with statsd_exporter to forward metrics to Prometheus server.
StatsD protocol doesn't have a notion of labels,
but `Datadog's fork <https://docs.datadoghq.com/guides/dogstatsd/#tags>`_ has introduced tags.
Moreover statsd_exporter can convert them into Prometheus labels.

Let's take it step by step.
Firstly, we need `Datadog Python client <https://github.com/DataDog/datadogpy>`_.

.. code-block:: console

    $ pip install datadog==0.16.0

Secondly, we should increment "weatherapi.responses.total" counter.
For example:

.. code-block:: python

    import weather
    from datadog import statsd


    def request_weather_forecast(location):
        try:
            forecast = weather.Forecast.retrieve(location)
        except weather.APIError as exc:
            statsd.increment('weatherapi.responses.total', tags=[
                'code:{}'.format(exc.http_status_code),
            ])
            raise

        statsd.increment('weatherapi.responses.total', tags=[
            'code:200',
        ])
        return forecast

Well, since I made up the weather library, we can just run a Python script:

.. code-block:: python

    from datadog import statsd
    statsd.increment('weatherapi.responses.total', tags=['code:200'])

And finally, we should run statsd_exporter with disabled "-statsd.add-suffix" flag
which adds the metric type (counter/gauge/timer) as suffix to the generated Prometheus metric.

.. code-block:: console

    $ statsd_exporter \
        -statsd.listen-address=:8125 \
        -statsd.add-suffix=false

The statsd_exporter should expose our metric at http://localhost:9102/metrics.

.. code-block:: text

    # HELP weatherapi_responses_total Metric autogenerated by statsd_exporter.
    # TYPE weatherapi_responses_total counter
    weatherapi_responses_total{code="200"} 1

I hope this helps. Cheers!
